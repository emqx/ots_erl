%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.5
%% Version source: git
-module(ots_ts_sql).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_MetaQueryConditionType/1, enum_value_by_symbol_MetaQueryConditionType/1]).
-export([enum_symbol_by_value_MetaQueryCompositeOperator/1, enum_value_by_symbol_MetaQueryCompositeOperator/1]).
-export([enum_symbol_by_value_MetaQuerySingleOperator/1, enum_value_by_symbol_MetaQuerySingleOperator/1]).
-export([enum_symbol_by_value_RowsSerializeType/1, enum_value_by_symbol_RowsSerializeType/1]).
-export([enum_symbol_by_value_MetaUpdateMode/1, enum_value_by_symbol_MetaUpdateMode/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("ots_ts_sql.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'MetaQueryConditionType'() :: 'COMPOSITE_CONDITION' | 'MEASUREMENT_CONDITION' | 'SOURCE_CONDITION' | 'TAG_CONDITION' | 'UPDATE_TIME_CONDITION' | 'ATTRIBUTE_CONDITION'.
-type 'MetaQueryCompositeOperator'() :: 'OP_AND' | 'OP_OR' | 'OP_NOT'.
-type 'MetaQuerySingleOperator'() :: 'OP_EQUAL' | 'OP_GREATER_THAN' | 'OP_GREATER_EQUAL' | 'OP_LESS_THAN' | 'OP_LESS_EQUAL' | 'OP_PREFIX'.
-type 'RowsSerializeType'() :: 'RST_FLAT_BUFFER' | 'RST_PLAIN_BUFFER' | 'RST_PROTO_BUFFER'.
-type 'MetaUpdateMode'() :: 'MUM_NORMAL' | 'MUM_IGNORE'.
-export_type(['MetaQueryConditionType'/0, 'MetaQueryCompositeOperator'/0, 'MetaQuerySingleOperator'/0, 'RowsSerializeType'/0, 'MetaUpdateMode'/0]).

%% message types
-type 'TimeseriesTableOptions'() :: #'TimeseriesTableOptions'{}.

-type 'TimeseriesTableMeta'() :: #'TimeseriesTableMeta'{}.

-type 'CreateTimeseriesTableRequest'() :: #'CreateTimeseriesTableRequest'{}.

-type 'CreateTimeseriesTableResponse'() :: #'CreateTimeseriesTableResponse'{}.

-type 'ListTimeseriesTableRequest'() :: #'ListTimeseriesTableRequest'{}.

-type 'ListTimeseriesTableResponse'() :: #'ListTimeseriesTableResponse'{}.

-type 'DeleteTimeseriesTableRequest'() :: #'DeleteTimeseriesTableRequest'{}.

-type 'DeleteTimeseriesTableResponse'() :: #'DeleteTimeseriesTableResponse'{}.

-type 'UpdateTimeseriesTableRequest'() :: #'UpdateTimeseriesTableRequest'{}.

-type 'UpdateTimeseriesTableResponse'() :: #'UpdateTimeseriesTableResponse'{}.

-type 'DescribeTimeseriesTableRequest'() :: #'DescribeTimeseriesTableRequest'{}.

-type 'DescribeTimeseriesTableResponse'() :: #'DescribeTimeseriesTableResponse'{}.

-type 'MetaQueryCondition'() :: #'MetaQueryCondition'{}.

-type 'MetaQueryCompositeCondition'() :: #'MetaQueryCompositeCondition'{}.

-type 'MetaQueryMeasurementCondition'() :: #'MetaQueryMeasurementCondition'{}.

-type 'MetaQuerySourceCondition'() :: #'MetaQuerySourceCondition'{}.

-type 'MetaQueryTagCondition'() :: #'MetaQueryTagCondition'{}.

-type 'MetaQueryAttributeCondition'() :: #'MetaQueryAttributeCondition'{}.

-type 'MetaQueryUpdateTimeCondition'() :: #'MetaQueryUpdateTimeCondition'{}.

-type 'TimeseriesKey'() :: #'TimeseriesKey'{}.

-type 'TimeseriesMeta'() :: #'TimeseriesMeta'{}.

-type 'QueryTimeseriesMetaRequest'() :: #'QueryTimeseriesMetaRequest'{}.

-type 'QueryTimeseriesMetaResponse'() :: #'QueryTimeseriesMetaResponse'{}.

-type 'TimeseriesRows'() :: #'TimeseriesRows'{}.

-type 'PutTimeseriesDataRequest'() :: #'PutTimeseriesDataRequest'{}.

-type 'FailedRowInfo'() :: #'FailedRowInfo'{}.

-type 'MetaUpdateStatus'() :: #'MetaUpdateStatus'{}.

-type 'PutTimeseriesDataResponse'() :: #'PutTimeseriesDataResponse'{}.

-type 'GetTimeseriesDataRequest'() :: #'GetTimeseriesDataRequest'{}.

-type 'GetTimeseriesDataResponse'() :: #'GetTimeseriesDataResponse'{}.

-type 'UpdateTimeseriesMetaRequest'() :: #'UpdateTimeseriesMetaRequest'{}.

-type 'UpdateTimeseriesMetaResponse'() :: #'UpdateTimeseriesMetaResponse'{}.

-type 'DeleteTimeseriesMetaRequest'() :: #'DeleteTimeseriesMetaRequest'{}.

-type 'DeleteTimeseriesMetaResponse'() :: #'DeleteTimeseriesMetaResponse'{}.

-type 'TimeseriesField'() :: #'TimeseriesField'{}.

-type 'TimeseriesRow'() :: #'TimeseriesRow'{}.

-type 'TimeseriesPBRows'() :: #'TimeseriesPBRows'{}.

-type 'ErrorResponse'() :: #'ErrorResponse'{}.

-export_type(['TimeseriesTableOptions'/0, 'TimeseriesTableMeta'/0, 'CreateTimeseriesTableRequest'/0, 'CreateTimeseriesTableResponse'/0, 'ListTimeseriesTableRequest'/0, 'ListTimeseriesTableResponse'/0, 'DeleteTimeseriesTableRequest'/0, 'DeleteTimeseriesTableResponse'/0, 'UpdateTimeseriesTableRequest'/0, 'UpdateTimeseriesTableResponse'/0, 'DescribeTimeseriesTableRequest'/0, 'DescribeTimeseriesTableResponse'/0, 'MetaQueryCondition'/0, 'MetaQueryCompositeCondition'/0, 'MetaQueryMeasurementCondition'/0, 'MetaQuerySourceCondition'/0, 'MetaQueryTagCondition'/0, 'MetaQueryAttributeCondition'/0, 'MetaQueryUpdateTimeCondition'/0, 'TimeseriesKey'/0, 'TimeseriesMeta'/0, 'QueryTimeseriesMetaRequest'/0, 'QueryTimeseriesMetaResponse'/0, 'TimeseriesRows'/0, 'PutTimeseriesDataRequest'/0, 'FailedRowInfo'/0, 'MetaUpdateStatus'/0, 'PutTimeseriesDataResponse'/0, 'GetTimeseriesDataRequest'/0, 'GetTimeseriesDataResponse'/0, 'UpdateTimeseriesMetaRequest'/0, 'UpdateTimeseriesMetaResponse'/0, 'DeleteTimeseriesMetaRequest'/0, 'DeleteTimeseriesMetaResponse'/0, 'TimeseriesField'/0, 'TimeseriesRow'/0, 'TimeseriesPBRows'/0, 'ErrorResponse'/0]).
-type '$msg_name'() :: 'TimeseriesTableOptions' | 'TimeseriesTableMeta' | 'CreateTimeseriesTableRequest' | 'CreateTimeseriesTableResponse' | 'ListTimeseriesTableRequest' | 'ListTimeseriesTableResponse' | 'DeleteTimeseriesTableRequest' | 'DeleteTimeseriesTableResponse' | 'UpdateTimeseriesTableRequest' | 'UpdateTimeseriesTableResponse' | 'DescribeTimeseriesTableRequest' | 'DescribeTimeseriesTableResponse' | 'MetaQueryCondition' | 'MetaQueryCompositeCondition' | 'MetaQueryMeasurementCondition' | 'MetaQuerySourceCondition' | 'MetaQueryTagCondition' | 'MetaQueryAttributeCondition' | 'MetaQueryUpdateTimeCondition' | 'TimeseriesKey' | 'TimeseriesMeta' | 'QueryTimeseriesMetaRequest' | 'QueryTimeseriesMetaResponse' | 'TimeseriesRows' | 'PutTimeseriesDataRequest' | 'FailedRowInfo' | 'MetaUpdateStatus' | 'PutTimeseriesDataResponse' | 'GetTimeseriesDataRequest' | 'GetTimeseriesDataResponse' | 'UpdateTimeseriesMetaRequest' | 'UpdateTimeseriesMetaResponse' | 'DeleteTimeseriesMetaRequest' | 'DeleteTimeseriesMetaResponse' | 'TimeseriesField' | 'TimeseriesRow' | 'TimeseriesPBRows' | 'ErrorResponse'.
-type '$msg'() :: 'TimeseriesTableOptions'() | 'TimeseriesTableMeta'() | 'CreateTimeseriesTableRequest'() | 'CreateTimeseriesTableResponse'() | 'ListTimeseriesTableRequest'() | 'ListTimeseriesTableResponse'() | 'DeleteTimeseriesTableRequest'() | 'DeleteTimeseriesTableResponse'() | 'UpdateTimeseriesTableRequest'() | 'UpdateTimeseriesTableResponse'() | 'DescribeTimeseriesTableRequest'() | 'DescribeTimeseriesTableResponse'() | 'MetaQueryCondition'() | 'MetaQueryCompositeCondition'() | 'MetaQueryMeasurementCondition'() | 'MetaQuerySourceCondition'() | 'MetaQueryTagCondition'() | 'MetaQueryAttributeCondition'() | 'MetaQueryUpdateTimeCondition'() | 'TimeseriesKey'() | 'TimeseriesMeta'() | 'QueryTimeseriesMetaRequest'() | 'QueryTimeseriesMetaResponse'() | 'TimeseriesRows'() | 'PutTimeseriesDataRequest'() | 'FailedRowInfo'() | 'MetaUpdateStatus'() | 'PutTimeseriesDataResponse'() | 'GetTimeseriesDataRequest'() | 'GetTimeseriesDataResponse'() | 'UpdateTimeseriesMetaRequest'() | 'UpdateTimeseriesMetaResponse'() | 'DeleteTimeseriesMetaRequest'() | 'DeleteTimeseriesMetaResponse'() | 'TimeseriesField'() | 'TimeseriesRow'() | 'TimeseriesPBRows'() | 'ErrorResponse'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesTableOptions' -> encode_msg_TimeseriesTableOptions(id(Msg, TrUserData), TrUserData);
        'TimeseriesTableMeta' -> encode_msg_TimeseriesTableMeta(id(Msg, TrUserData), TrUserData);
        'CreateTimeseriesTableRequest' -> encode_msg_CreateTimeseriesTableRequest(id(Msg, TrUserData), TrUserData);
        'CreateTimeseriesTableResponse' -> encode_msg_CreateTimeseriesTableResponse(id(Msg, TrUserData), TrUserData);
        'ListTimeseriesTableRequest' -> encode_msg_ListTimeseriesTableRequest(id(Msg, TrUserData), TrUserData);
        'ListTimeseriesTableResponse' -> encode_msg_ListTimeseriesTableResponse(id(Msg, TrUserData), TrUserData);
        'DeleteTimeseriesTableRequest' -> encode_msg_DeleteTimeseriesTableRequest(id(Msg, TrUserData), TrUserData);
        'DeleteTimeseriesTableResponse' -> encode_msg_DeleteTimeseriesTableResponse(id(Msg, TrUserData), TrUserData);
        'UpdateTimeseriesTableRequest' -> encode_msg_UpdateTimeseriesTableRequest(id(Msg, TrUserData), TrUserData);
        'UpdateTimeseriesTableResponse' -> encode_msg_UpdateTimeseriesTableResponse(id(Msg, TrUserData), TrUserData);
        'DescribeTimeseriesTableRequest' -> encode_msg_DescribeTimeseriesTableRequest(id(Msg, TrUserData), TrUserData);
        'DescribeTimeseriesTableResponse' -> encode_msg_DescribeTimeseriesTableResponse(id(Msg, TrUserData), TrUserData);
        'MetaQueryCondition' -> encode_msg_MetaQueryCondition(id(Msg, TrUserData), TrUserData);
        'MetaQueryCompositeCondition' -> encode_msg_MetaQueryCompositeCondition(id(Msg, TrUserData), TrUserData);
        'MetaQueryMeasurementCondition' -> encode_msg_MetaQueryMeasurementCondition(id(Msg, TrUserData), TrUserData);
        'MetaQuerySourceCondition' -> encode_msg_MetaQuerySourceCondition(id(Msg, TrUserData), TrUserData);
        'MetaQueryTagCondition' -> encode_msg_MetaQueryTagCondition(id(Msg, TrUserData), TrUserData);
        'MetaQueryAttributeCondition' -> encode_msg_MetaQueryAttributeCondition(id(Msg, TrUserData), TrUserData);
        'MetaQueryUpdateTimeCondition' -> encode_msg_MetaQueryUpdateTimeCondition(id(Msg, TrUserData), TrUserData);
        'TimeseriesKey' -> encode_msg_TimeseriesKey(id(Msg, TrUserData), TrUserData);
        'TimeseriesMeta' -> encode_msg_TimeseriesMeta(id(Msg, TrUserData), TrUserData);
        'QueryTimeseriesMetaRequest' -> encode_msg_QueryTimeseriesMetaRequest(id(Msg, TrUserData), TrUserData);
        'QueryTimeseriesMetaResponse' -> encode_msg_QueryTimeseriesMetaResponse(id(Msg, TrUserData), TrUserData);
        'TimeseriesRows' -> encode_msg_TimeseriesRows(id(Msg, TrUserData), TrUserData);
        'PutTimeseriesDataRequest' -> encode_msg_PutTimeseriesDataRequest(id(Msg, TrUserData), TrUserData);
        'FailedRowInfo' -> encode_msg_FailedRowInfo(id(Msg, TrUserData), TrUserData);
        'MetaUpdateStatus' -> encode_msg_MetaUpdateStatus(id(Msg, TrUserData), TrUserData);
        'PutTimeseriesDataResponse' -> encode_msg_PutTimeseriesDataResponse(id(Msg, TrUserData), TrUserData);
        'GetTimeseriesDataRequest' -> encode_msg_GetTimeseriesDataRequest(id(Msg, TrUserData), TrUserData);
        'GetTimeseriesDataResponse' -> encode_msg_GetTimeseriesDataResponse(id(Msg, TrUserData), TrUserData);
        'UpdateTimeseriesMetaRequest' -> encode_msg_UpdateTimeseriesMetaRequest(id(Msg, TrUserData), TrUserData);
        'UpdateTimeseriesMetaResponse' -> encode_msg_UpdateTimeseriesMetaResponse(id(Msg, TrUserData), TrUserData);
        'DeleteTimeseriesMetaRequest' -> encode_msg_DeleteTimeseriesMetaRequest(id(Msg, TrUserData), TrUserData);
        'DeleteTimeseriesMetaResponse' -> encode_msg_DeleteTimeseriesMetaResponse(id(Msg, TrUserData), TrUserData);
        'TimeseriesField' -> encode_msg_TimeseriesField(id(Msg, TrUserData), TrUserData);
        'TimeseriesRow' -> encode_msg_TimeseriesRow(id(Msg, TrUserData), TrUserData);
        'TimeseriesPBRows' -> encode_msg_TimeseriesPBRows(id(Msg, TrUserData), TrUserData);
        'ErrorResponse' -> encode_msg_ErrorResponse(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_TimeseriesTableOptions(Msg, TrUserData) -> encode_msg_TimeseriesTableOptions(Msg, <<>>, TrUserData).


encode_msg_TimeseriesTableOptions(#'TimeseriesTableOptions'{time_to_live = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true -> begin TrF1 = id(F1, TrUserData), e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData) end
    end.

encode_msg_TimeseriesTableMeta(Msg, TrUserData) -> encode_msg_TimeseriesTableMeta(Msg, <<>>, TrUserData).


encode_msg_TimeseriesTableMeta(#'TimeseriesTableMeta'{table_name = F1, table_options = F2, status = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_mfield_TimeseriesTableMeta_table_options(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

encode_msg_CreateTimeseriesTableRequest(Msg, TrUserData) -> encode_msg_CreateTimeseriesTableRequest(Msg, <<>>, TrUserData).


encode_msg_CreateTimeseriesTableRequest(#'CreateTimeseriesTableRequest'{table_meta = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_mfield_CreateTimeseriesTableRequest_table_meta(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_CreateTimeseriesTableResponse(_Msg, _TrUserData) -> <<>>.

encode_msg_ListTimeseriesTableRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_ListTimeseriesTableResponse(Msg, TrUserData) -> encode_msg_ListTimeseriesTableResponse(Msg, <<>>, TrUserData).


encode_msg_ListTimeseriesTableResponse(#'ListTimeseriesTableResponse'{table_metas = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_ListTimeseriesTableResponse_table_metas(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_DeleteTimeseriesTableRequest(Msg, TrUserData) -> encode_msg_DeleteTimeseriesTableRequest(Msg, <<>>, TrUserData).


encode_msg_DeleteTimeseriesTableRequest(#'DeleteTimeseriesTableRequest'{table_name = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_DeleteTimeseriesTableResponse(_Msg, _TrUserData) -> <<>>.

encode_msg_UpdateTimeseriesTableRequest(Msg, TrUserData) -> encode_msg_UpdateTimeseriesTableRequest(Msg, <<>>, TrUserData).


encode_msg_UpdateTimeseriesTableRequest(#'UpdateTimeseriesTableRequest'{table_name = F1, table_options = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_mfield_UpdateTimeseriesTableRequest_table_options(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

encode_msg_UpdateTimeseriesTableResponse(_Msg, _TrUserData) -> <<>>.

encode_msg_DescribeTimeseriesTableRequest(Msg, TrUserData) -> encode_msg_DescribeTimeseriesTableRequest(Msg, <<>>, TrUserData).


encode_msg_DescribeTimeseriesTableRequest(#'DescribeTimeseriesTableRequest'{table_name = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_DescribeTimeseriesTableResponse(Msg, TrUserData) -> encode_msg_DescribeTimeseriesTableResponse(Msg, <<>>, TrUserData).


encode_msg_DescribeTimeseriesTableResponse(#'DescribeTimeseriesTableResponse'{table_meta = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_mfield_DescribeTimeseriesTableResponse_table_meta(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_MetaQueryCondition(Msg, TrUserData) -> encode_msg_MetaQueryCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryCondition(#'MetaQueryCondition'{type = F1, proto_data = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQueryConditionType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_MetaQueryCompositeCondition(Msg, TrUserData) -> encode_msg_MetaQueryCompositeCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryCompositeCondition(#'MetaQueryCompositeCondition'{op = F1, sub_conditions = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQueryCompositeOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_MetaQueryCompositeCondition_sub_conditions(TrF2, B1, TrUserData)
        end
    end.

encode_msg_MetaQueryMeasurementCondition(Msg, TrUserData) -> encode_msg_MetaQueryMeasurementCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryMeasurementCondition(#'MetaQueryMeasurementCondition'{op = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQuerySingleOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_MetaQuerySourceCondition(Msg, TrUserData) -> encode_msg_MetaQuerySourceCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQuerySourceCondition(#'MetaQuerySourceCondition'{op = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQuerySingleOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_MetaQueryTagCondition(Msg, TrUserData) -> encode_msg_MetaQueryTagCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryTagCondition(#'MetaQueryTagCondition'{op = F1, tag_name = F2, value = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQuerySingleOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_MetaQueryAttributeCondition(Msg, TrUserData) -> encode_msg_MetaQueryAttributeCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryAttributeCondition(#'MetaQueryAttributeCondition'{op = F1, attr_name = F2, value = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQuerySingleOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_MetaQueryUpdateTimeCondition(Msg, TrUserData) -> encode_msg_MetaQueryUpdateTimeCondition(Msg, <<>>, TrUserData).


encode_msg_MetaQueryUpdateTimeCondition(#'MetaQueryUpdateTimeCondition'{op = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_MetaQuerySingleOperator(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end.

encode_msg_TimeseriesKey(Msg, TrUserData) -> encode_msg_TimeseriesKey(Msg, <<>>, TrUserData).


encode_msg_TimeseriesKey(#'TimeseriesKey'{measurement = F1, source = F2, tags = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_TimeseriesMeta(Msg, TrUserData) -> encode_msg_TimeseriesMeta(Msg, <<>>, TrUserData).


encode_msg_TimeseriesMeta(#'TimeseriesMeta'{time_series_key = F1, attributes = F2, update_time = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_mfield_TimeseriesMeta_time_series_key(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_QueryTimeseriesMetaRequest(Msg, TrUserData) -> encode_msg_QueryTimeseriesMetaRequest(Msg, <<>>, TrUserData).


encode_msg_QueryTimeseriesMetaRequest(#'QueryTimeseriesMetaRequest'{table_name = F1, condition = F2, get_total_hit = F3, token = F4, limit = F5}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_mfield_QueryTimeseriesMetaRequest_condition(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

encode_msg_QueryTimeseriesMetaResponse(Msg, TrUserData) -> encode_msg_QueryTimeseriesMetaResponse(Msg, <<>>, TrUserData).


encode_msg_QueryTimeseriesMetaResponse(#'QueryTimeseriesMetaResponse'{timeseries_metas = F1, total_hit = F2, next_token = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_QueryTimeseriesMetaResponse_timeseries_metas(TrF1, Bin, TrUserData)
             end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

encode_msg_TimeseriesRows(Msg, TrUserData) -> encode_msg_TimeseriesRows(Msg, <<>>, TrUserData).


encode_msg_TimeseriesRows(#'TimeseriesRows'{type = F1, rows_data = F2, flatbuffer_crc32c = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RowsSerializeType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_PutTimeseriesDataRequest(Msg, TrUserData) -> encode_msg_PutTimeseriesDataRequest(Msg, <<>>, TrUserData).


encode_msg_PutTimeseriesDataRequest(#'PutTimeseriesDataRequest'{table_name = F1, rows_data = F2, meta_update_mode = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_mfield_PutTimeseriesDataRequest_rows_data(TrF2, <<B1/binary, 18>>, TrUserData) end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_enum_MetaUpdateMode(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_FailedRowInfo(Msg, TrUserData) -> encode_msg_FailedRowInfo(Msg, <<>>, TrUserData).


encode_msg_FailedRowInfo(#'FailedRowInfo'{row_index = F1, error_code = F2, error_message = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

encode_msg_MetaUpdateStatus(Msg, TrUserData) -> encode_msg_MetaUpdateStatus(Msg, <<>>, TrUserData).


encode_msg_MetaUpdateStatus(#'MetaUpdateStatus'{row_ids = F1, meta_update_times = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_MetaUpdateStatus_row_ids(TrF1, Bin, TrUserData)
             end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_MetaUpdateStatus_meta_update_times(TrF2, B1, TrUserData)
        end
    end.

encode_msg_PutTimeseriesDataResponse(Msg, TrUserData) -> encode_msg_PutTimeseriesDataResponse(Msg, <<>>, TrUserData).


encode_msg_PutTimeseriesDataResponse(#'PutTimeseriesDataResponse'{failed_rows = F1, meta_update_status = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_PutTimeseriesDataResponse_failed_rows(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_mfield_PutTimeseriesDataResponse_meta_update_status(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

encode_msg_GetTimeseriesDataRequest(Msg, TrUserData) -> encode_msg_GetTimeseriesDataRequest(Msg, <<>>, TrUserData).


encode_msg_GetTimeseriesDataRequest(#'GetTimeseriesDataRequest'{table_name = F1, time_series_key = F2, begin_time = F3, end_time = F4, specific_time = F5, token = F6, limit = F7}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_mfield_GetTimeseriesDataRequest_time_series_key(TrF2, <<B1/binary, 18>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_GetTimeseriesDataResponse(Msg, TrUserData) -> encode_msg_GetTimeseriesDataResponse(Msg, <<>>, TrUserData).


encode_msg_GetTimeseriesDataResponse(#'GetTimeseriesDataResponse'{rows_data = F1, next_token = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

encode_msg_UpdateTimeseriesMetaRequest(Msg, TrUserData) -> encode_msg_UpdateTimeseriesMetaRequest(Msg, <<>>, TrUserData).


encode_msg_UpdateTimeseriesMetaRequest(#'UpdateTimeseriesMetaRequest'{table_name = F1, timeseries_meta = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_UpdateTimeseriesMetaRequest_timeseries_meta(TrF2, B1, TrUserData)
        end
    end.

encode_msg_UpdateTimeseriesMetaResponse(Msg, TrUserData) -> encode_msg_UpdateTimeseriesMetaResponse(Msg, <<>>, TrUserData).


encode_msg_UpdateTimeseriesMetaResponse(#'UpdateTimeseriesMetaResponse'{failed_rows = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_UpdateTimeseriesMetaResponse_failed_rows(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_DeleteTimeseriesMetaRequest(Msg, TrUserData) -> encode_msg_DeleteTimeseriesMetaRequest(Msg, <<>>, TrUserData).


encode_msg_DeleteTimeseriesMetaRequest(#'DeleteTimeseriesMetaRequest'{table_name = F1, timeseries_key = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_DeleteTimeseriesMetaRequest_timeseries_key(TrF2, B1, TrUserData)
        end
    end.

encode_msg_DeleteTimeseriesMetaResponse(Msg, TrUserData) -> encode_msg_DeleteTimeseriesMetaResponse(Msg, <<>>, TrUserData).


encode_msg_DeleteTimeseriesMetaResponse(#'DeleteTimeseriesMetaResponse'{failed_rows = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_DeleteTimeseriesMetaResponse_failed_rows(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_TimeseriesField(Msg, TrUserData) -> encode_msg_TimeseriesField(Msg, <<>>, TrUserData).


encode_msg_TimeseriesField(#'TimeseriesField'{field_name = F1, value_int = F2, value_string = F3, value_bool = F4, value_double = F5, value_binary = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_double(TrF5, <<B4/binary, 41>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData) end
    end.

encode_msg_TimeseriesRow(Msg, TrUserData) -> encode_msg_TimeseriesRow(Msg, <<>>, TrUserData).


encode_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = F1, time = F2, fields = F3, meta_cache_update_time = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_mfield_TimeseriesRow_timeseries_key(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_TimeseriesRow_fields(TrF3, B2, TrUserData)
             end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_TimeseriesPBRows(Msg, TrUserData) -> encode_msg_TimeseriesPBRows(Msg, <<>>, TrUserData).


encode_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_TimeseriesPBRows_rows(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_ErrorResponse(Msg, TrUserData) -> encode_msg_ErrorResponse(Msg, <<>>, TrUserData).


encode_msg_ErrorResponse(#'ErrorResponse'{code = F1, message = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

e_mfield_TimeseriesTableMeta_table_options(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesTableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CreateTimeseriesTableRequest_table_meta(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesTableMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ListTimeseriesTableResponse_table_metas(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesTableMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ListTimeseriesTableResponse_table_metas([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ListTimeseriesTableResponse_table_metas(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ListTimeseriesTableResponse_table_metas(Rest, Bin3, TrUserData);
e_field_ListTimeseriesTableResponse_table_metas([], Bin, _TrUserData) -> Bin.

e_mfield_UpdateTimeseriesTableRequest_table_options(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesTableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescribeTimeseriesTableResponse_table_meta(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesTableMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MetaQueryCompositeCondition_sub_conditions(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MetaQueryCondition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MetaQueryCompositeCondition_sub_conditions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MetaQueryCompositeCondition_sub_conditions(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetaQueryCompositeCondition_sub_conditions(Rest, Bin3, TrUserData);
e_field_MetaQueryCompositeCondition_sub_conditions([], Bin, _TrUserData) -> Bin.

e_mfield_TimeseriesMeta_time_series_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesKey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_QueryTimeseriesMetaRequest_condition(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MetaQueryCondition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_QueryTimeseriesMetaResponse_timeseries_metas(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_QueryTimeseriesMetaResponse_timeseries_metas([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_QueryTimeseriesMetaResponse_timeseries_metas(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryTimeseriesMetaResponse_timeseries_metas(Rest, Bin3, TrUserData);
e_field_QueryTimeseriesMetaResponse_timeseries_metas([], Bin, _TrUserData) -> Bin.

e_mfield_PutTimeseriesDataRequest_rows_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesRows(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MetaUpdateStatus_row_ids([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetaUpdateStatus_row_ids(Rest, Bin3, TrUserData);
e_field_MetaUpdateStatus_row_ids([], Bin, _TrUserData) -> Bin.

e_field_MetaUpdateStatus_meta_update_times([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_MetaUpdateStatus_meta_update_times(Rest, Bin3, TrUserData);
e_field_MetaUpdateStatus_meta_update_times([], Bin, _TrUserData) -> Bin.

e_mfield_PutTimeseriesDataResponse_failed_rows(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FailedRowInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PutTimeseriesDataResponse_failed_rows([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_PutTimeseriesDataResponse_failed_rows(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_PutTimeseriesDataResponse_failed_rows(Rest, Bin3, TrUserData);
e_field_PutTimeseriesDataResponse_failed_rows([], Bin, _TrUserData) -> Bin.

e_mfield_PutTimeseriesDataResponse_meta_update_status(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_MetaUpdateStatus(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetTimeseriesDataRequest_time_series_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesKey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateTimeseriesMetaRequest_timeseries_meta(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UpdateTimeseriesMetaRequest_timeseries_meta([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_UpdateTimeseriesMetaRequest_timeseries_meta(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UpdateTimeseriesMetaRequest_timeseries_meta(Rest, Bin3, TrUserData);
e_field_UpdateTimeseriesMetaRequest_timeseries_meta([], Bin, _TrUserData) -> Bin.

e_mfield_UpdateTimeseriesMetaResponse_failed_rows(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FailedRowInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UpdateTimeseriesMetaResponse_failed_rows([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_UpdateTimeseriesMetaResponse_failed_rows(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UpdateTimeseriesMetaResponse_failed_rows(Rest, Bin3, TrUserData);
e_field_UpdateTimeseriesMetaResponse_failed_rows([], Bin, _TrUserData) -> Bin.

e_mfield_DeleteTimeseriesMetaRequest_timeseries_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesKey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DeleteTimeseriesMetaRequest_timeseries_key([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_DeleteTimeseriesMetaRequest_timeseries_key(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_DeleteTimeseriesMetaRequest_timeseries_key(Rest, Bin3, TrUserData);
e_field_DeleteTimeseriesMetaRequest_timeseries_key([], Bin, _TrUserData) -> Bin.

e_mfield_DeleteTimeseriesMetaResponse_failed_rows(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FailedRowInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DeleteTimeseriesMetaResponse_failed_rows([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_DeleteTimeseriesMetaResponse_failed_rows(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_DeleteTimeseriesMetaResponse_failed_rows(Rest, Bin3, TrUserData);
e_field_DeleteTimeseriesMetaResponse_failed_rows([], Bin, _TrUserData) -> Bin.

e_mfield_TimeseriesRow_timeseries_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesKey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TimeseriesRow_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesField(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeseriesRow_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_TimeseriesRow_fields(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeseriesRow_fields(Rest, Bin3, TrUserData);
e_field_TimeseriesRow_fields([], Bin, _TrUserData) -> Bin.

e_mfield_TimeseriesPBRows_rows(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesRow(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeseriesPBRows_rows([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_TimeseriesPBRows_rows(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeseriesPBRows_rows(Rest, Bin3, TrUserData);
e_field_TimeseriesPBRows_rows([], Bin, _TrUserData) -> Bin.

e_enum_MetaQueryConditionType('COMPOSITE_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MetaQueryConditionType('MEASUREMENT_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_MetaQueryConditionType('SOURCE_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_MetaQueryConditionType('TAG_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_MetaQueryConditionType('UPDATE_TIME_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_MetaQueryConditionType('ATTRIBUTE_CONDITION', Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_MetaQueryConditionType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_MetaQueryCompositeOperator('OP_AND', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MetaQueryCompositeOperator('OP_OR', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_MetaQueryCompositeOperator('OP_NOT', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_MetaQueryCompositeOperator(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_MetaQuerySingleOperator('OP_EQUAL', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MetaQuerySingleOperator('OP_GREATER_THAN', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_MetaQuerySingleOperator('OP_GREATER_EQUAL', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_MetaQuerySingleOperator('OP_LESS_THAN', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_MetaQuerySingleOperator('OP_LESS_EQUAL', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_MetaQuerySingleOperator('OP_PREFIX', Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_MetaQuerySingleOperator(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_RowsSerializeType('RST_FLAT_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_RowsSerializeType('RST_PLAIN_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_RowsSerializeType('RST_PROTO_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_RowsSerializeType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_MetaUpdateMode('MUM_NORMAL', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_MetaUpdateMode('MUM_IGNORE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MetaUpdateMode(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('TimeseriesTableOptions', Bin, TrUserData) -> id(decode_msg_TimeseriesTableOptions(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesTableMeta', Bin, TrUserData) -> id(decode_msg_TimeseriesTableMeta(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CreateTimeseriesTableRequest', Bin, TrUserData) -> id(decode_msg_CreateTimeseriesTableRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CreateTimeseriesTableResponse', Bin, TrUserData) -> id(decode_msg_CreateTimeseriesTableResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ListTimeseriesTableRequest', Bin, TrUserData) -> id(decode_msg_ListTimeseriesTableRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ListTimeseriesTableResponse', Bin, TrUserData) -> id(decode_msg_ListTimeseriesTableResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteTimeseriesTableRequest', Bin, TrUserData) -> id(decode_msg_DeleteTimeseriesTableRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteTimeseriesTableResponse', Bin, TrUserData) -> id(decode_msg_DeleteTimeseriesTableResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UpdateTimeseriesTableRequest', Bin, TrUserData) -> id(decode_msg_UpdateTimeseriesTableRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UpdateTimeseriesTableResponse', Bin, TrUserData) -> id(decode_msg_UpdateTimeseriesTableResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DescribeTimeseriesTableRequest', Bin, TrUserData) -> id(decode_msg_DescribeTimeseriesTableRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DescribeTimeseriesTableResponse', Bin, TrUserData) -> id(decode_msg_DescribeTimeseriesTableResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryCompositeCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryCompositeCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryMeasurementCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryMeasurementCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQuerySourceCondition', Bin, TrUserData) -> id(decode_msg_MetaQuerySourceCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryTagCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryTagCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryAttributeCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryAttributeCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaQueryUpdateTimeCondition', Bin, TrUserData) -> id(decode_msg_MetaQueryUpdateTimeCondition(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesKey', Bin, TrUserData) -> id(decode_msg_TimeseriesKey(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesMeta', Bin, TrUserData) -> id(decode_msg_TimeseriesMeta(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryTimeseriesMetaRequest', Bin, TrUserData) -> id(decode_msg_QueryTimeseriesMetaRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryTimeseriesMetaResponse', Bin, TrUserData) -> id(decode_msg_QueryTimeseriesMetaResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesRows', Bin, TrUserData) -> id(decode_msg_TimeseriesRows(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutTimeseriesDataRequest', Bin, TrUserData) -> id(decode_msg_PutTimeseriesDataRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FailedRowInfo', Bin, TrUserData) -> id(decode_msg_FailedRowInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MetaUpdateStatus', Bin, TrUserData) -> id(decode_msg_MetaUpdateStatus(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PutTimeseriesDataResponse', Bin, TrUserData) -> id(decode_msg_PutTimeseriesDataResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GetTimeseriesDataRequest', Bin, TrUserData) -> id(decode_msg_GetTimeseriesDataRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GetTimeseriesDataResponse', Bin, TrUserData) -> id(decode_msg_GetTimeseriesDataResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UpdateTimeseriesMetaRequest', Bin, TrUserData) -> id(decode_msg_UpdateTimeseriesMetaRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UpdateTimeseriesMetaResponse', Bin, TrUserData) -> id(decode_msg_UpdateTimeseriesMetaResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteTimeseriesMetaRequest', Bin, TrUserData) -> id(decode_msg_DeleteTimeseriesMetaRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DeleteTimeseriesMetaResponse', Bin, TrUserData) -> id(decode_msg_DeleteTimeseriesMetaResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesField', Bin, TrUserData) -> id(decode_msg_TimeseriesField(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesRow', Bin, TrUserData) -> id(decode_msg_TimeseriesRow(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesPBRows', Bin, TrUserData) -> id(decode_msg_TimeseriesPBRows(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ErrorResponse', Bin, TrUserData) -> id(decode_msg_ErrorResponse(Bin, TrUserData), TrUserData).



decode_msg_TimeseriesTableOptions(Bin, TrUserData) -> dfp_read_field_def_TimeseriesTableOptions(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesTableOptions(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TimeseriesTableOptions_time_to_live(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TimeseriesTableOptions(<<>>, 0, 0, _, F@_1, _) -> #'TimeseriesTableOptions'{time_to_live = F@_1};
dfp_read_field_def_TimeseriesTableOptions(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TimeseriesTableOptions(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TimeseriesTableOptions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesTableOptions(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TimeseriesTableOptions(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_TimeseriesTableOptions_time_to_live(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesTableOptions(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TimeseriesTableOptions(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TimeseriesTableOptions(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TimeseriesTableOptions(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TimeseriesTableOptions(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesTableOptions(<<>>, 0, 0, _, F@_1, _) -> #'TimeseriesTableOptions'{time_to_live = F@_1}.

d_field_TimeseriesTableOptions_time_to_live(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TimeseriesTableOptions_time_to_live(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TimeseriesTableOptions_time_to_live(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesTableOptions(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_TimeseriesTableOptions(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TimeseriesTableOptions(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TimeseriesTableOptions(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesTableOptions(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TimeseriesTableOptions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesTableOptions(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TimeseriesTableOptions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesTableOptions(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TimeseriesTableOptions(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesTableOptions(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TimeseriesTableOptions(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesTableOptions(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TimeseriesTableOptions(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesTableOptions(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_TimeseriesTableMeta(Bin, TrUserData) -> dfp_read_field_def_TimeseriesTableMeta(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesTableMeta(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesTableMeta_table_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesTableMeta(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesTableMeta_table_options(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesTableMeta(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesTableMeta_status(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesTableMeta(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesTableMeta'{table_name = F@_1, table_options = F@_2, status = F@_3};
dfp_read_field_def_TimeseriesTableMeta(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesTableMeta(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesTableMeta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesTableMeta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesTableMeta(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesTableMeta_table_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesTableMeta_table_options(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_TimeseriesTableMeta_status(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesTableMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesTableMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesTableMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesTableMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesTableMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesTableMeta(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesTableMeta'{table_name = F@_1, table_options = F@_2, status = F@_3}.

d_field_TimeseriesTableMeta_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesTableMeta_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesTableMeta_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesTableMeta(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_TimeseriesTableMeta_table_options(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesTableMeta_table_options(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesTableMeta_table_options(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesTableOptions(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesTableMeta(RestF,
                                           0,
                                           0,
                                           F,
                                           F@_1,
                                           if Prev == undefined -> NewFValue;
                                              true -> merge_msg_TimeseriesTableOptions(Prev, NewFValue, TrUserData)
                                           end,
                                           F@_3,
                                           TrUserData).

d_field_TimeseriesTableMeta_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesTableMeta_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesTableMeta_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesTableMeta(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesTableMeta(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesTableMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesTableMeta(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesTableMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesTableMeta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesTableMeta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesTableMeta(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesTableMeta(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesTableMeta(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesTableMeta(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesTableMeta(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesTableMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesTableMeta(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesTableMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_CreateTimeseriesTableRequest(Bin, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableRequest(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CreateTimeseriesTableRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_CreateTimeseriesTableRequest_table_meta(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_CreateTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'CreateTimeseriesTableRequest'{table_meta = F@_1};
dfp_read_field_def_CreateTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_CreateTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_CreateTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_CreateTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_CreateTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_CreateTimeseriesTableRequest_table_meta(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CreateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_CreateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_CreateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_CreateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_CreateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_CreateTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'CreateTimeseriesTableRequest'{table_meta = F@_1}.

d_field_CreateTimeseriesTableRequest_table_meta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_CreateTimeseriesTableRequest_table_meta(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_CreateTimeseriesTableRequest_table_meta(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesTableMeta(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_CreateTimeseriesTableRequest(RestF,
                                                    0,
                                                    0,
                                                    F,
                                                    if Prev == undefined -> NewFValue;
                                                       true -> merge_msg_TimeseriesTableMeta(Prev, NewFValue, TrUserData)
                                                    end,
                                                    TrUserData).

skip_varint_CreateTimeseriesTableRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_CreateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_CreateTimeseriesTableRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_CreateTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_CreateTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_CreateTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateTimeseriesTableRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_CreateTimeseriesTableRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CreateTimeseriesTableRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_CreateTimeseriesTableRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_CreateTimeseriesTableRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_CreateTimeseriesTableResponse(Bin, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableResponse(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_CreateTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'CreateTimeseriesTableResponse'{};
dfp_read_field_def_CreateTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_CreateTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_CreateTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_CreateTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_CreateTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_CreateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_CreateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_CreateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_CreateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_CreateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_CreateTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'CreateTimeseriesTableResponse'{}.

skip_varint_CreateTimeseriesTableResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_CreateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData);
skip_varint_CreateTimeseriesTableResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_CreateTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_CreateTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_CreateTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateTimeseriesTableResponse(Rest2, 0, 0, F, TrUserData).

skip_group_CreateTimeseriesTableResponse(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CreateTimeseriesTableResponse(Rest, 0, Z2, FNum, TrUserData).

skip_32_CreateTimeseriesTableResponse(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_64_CreateTimeseriesTableResponse(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_CreateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

decode_msg_ListTimeseriesTableRequest(Bin, TrUserData) -> dfp_read_field_def_ListTimeseriesTableRequest(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_ListTimeseriesTableRequest(<<>>, 0, 0, _, _) -> #'ListTimeseriesTableRequest'{};
dfp_read_field_def_ListTimeseriesTableRequest(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_ListTimeseriesTableRequest(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_ListTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_ListTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_ListTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ListTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_ListTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_ListTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_ListTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_ListTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_ListTimeseriesTableRequest(<<>>, 0, 0, _, _) -> #'ListTimeseriesTableRequest'{}.

skip_varint_ListTimeseriesTableRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_ListTimeseriesTableRequest(Rest, Z1, Z2, F, TrUserData);
skip_varint_ListTimeseriesTableRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ListTimeseriesTableRequest(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_ListTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_ListTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_ListTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ListTimeseriesTableRequest(Rest2, 0, 0, F, TrUserData).

skip_group_ListTimeseriesTableRequest(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ListTimeseriesTableRequest(Rest, 0, Z2, FNum, TrUserData).

skip_32_ListTimeseriesTableRequest(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ListTimeseriesTableRequest(Rest, Z1, Z2, F, TrUserData).

skip_64_ListTimeseriesTableRequest(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ListTimeseriesTableRequest(Rest, Z1, Z2, F, TrUserData).

decode_msg_ListTimeseriesTableResponse(Bin, TrUserData) -> dfp_read_field_def_ListTimeseriesTableResponse(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_ListTimeseriesTableResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ListTimeseriesTableResponse_table_metas(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ListTimeseriesTableResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'ListTimeseriesTableResponse'{table_metas = lists_reverse(R1, TrUserData)};
dfp_read_field_def_ListTimeseriesTableResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ListTimeseriesTableResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ListTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ListTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ListTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ListTimeseriesTableResponse_table_metas(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ListTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ListTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ListTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ListTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ListTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ListTimeseriesTableResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'ListTimeseriesTableResponse'{table_metas = lists_reverse(R1, TrUserData)}.

d_field_ListTimeseriesTableResponse_table_metas(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ListTimeseriesTableResponse_table_metas(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ListTimeseriesTableResponse_table_metas(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesTableMeta(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ListTimeseriesTableResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_ListTimeseriesTableResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ListTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ListTimeseriesTableResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ListTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ListTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ListTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ListTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ListTimeseriesTableResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ListTimeseriesTableResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ListTimeseriesTableResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ListTimeseriesTableResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ListTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ListTimeseriesTableResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ListTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_DeleteTimeseriesTableRequest(Bin, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableRequest(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DeleteTimeseriesTableRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_DeleteTimeseriesTableRequest_table_name(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_DeleteTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'DeleteTimeseriesTableRequest'{table_name = F@_1};
dfp_read_field_def_DeleteTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_DeleteTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_DeleteTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_DeleteTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_DeleteTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DeleteTimeseriesTableRequest_table_name(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DeleteTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_DeleteTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_DeleteTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_DeleteTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_DeleteTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_DeleteTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'DeleteTimeseriesTableRequest'{table_name = F@_1}.

d_field_DeleteTimeseriesTableRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_DeleteTimeseriesTableRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_DeleteTimeseriesTableRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_DeleteTimeseriesTableRequest(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_DeleteTimeseriesTableRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_DeleteTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_DeleteTimeseriesTableRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_DeleteTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_DeleteTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_DeleteTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTimeseriesTableRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_DeleteTimeseriesTableRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteTimeseriesTableRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_DeleteTimeseriesTableRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_DeleteTimeseriesTableRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_DeleteTimeseriesTableResponse(Bin, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableResponse(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_DeleteTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'DeleteTimeseriesTableResponse'{};
dfp_read_field_def_DeleteTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_DeleteTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_DeleteTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_DeleteTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_DeleteTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_DeleteTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_DeleteTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_DeleteTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_DeleteTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_DeleteTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_DeleteTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'DeleteTimeseriesTableResponse'{}.

skip_varint_DeleteTimeseriesTableResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_DeleteTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData);
skip_varint_DeleteTimeseriesTableResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_DeleteTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_DeleteTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_DeleteTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTimeseriesTableResponse(Rest2, 0, 0, F, TrUserData).

skip_group_DeleteTimeseriesTableResponse(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteTimeseriesTableResponse(Rest, 0, Z2, FNum, TrUserData).

skip_32_DeleteTimeseriesTableResponse(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_64_DeleteTimeseriesTableResponse(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_DeleteTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

decode_msg_UpdateTimeseriesTableRequest(Bin, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableRequest(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UpdateTimeseriesTableRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UpdateTimeseriesTableRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UpdateTimeseriesTableRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UpdateTimeseriesTableRequest_table_options(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UpdateTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'UpdateTimeseriesTableRequest'{table_name = F@_1, table_options = F@_2};
dfp_read_field_def_UpdateTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_UpdateTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_UpdateTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_UpdateTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_UpdateTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UpdateTimeseriesTableRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_UpdateTimeseriesTableRequest_table_options(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UpdateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_UpdateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_UpdateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_UpdateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_UpdateTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_UpdateTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'UpdateTimeseriesTableRequest'{table_name = F@_1, table_options = F@_2}.

d_field_UpdateTimeseriesTableRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UpdateTimeseriesTableRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UpdateTimeseriesTableRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UpdateTimeseriesTableRequest(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_UpdateTimeseriesTableRequest_table_options(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UpdateTimeseriesTableRequest_table_options(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UpdateTimeseriesTableRequest_table_options(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesTableOptions(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UpdateTimeseriesTableRequest(RestF,
                                                    0,
                                                    0,
                                                    F,
                                                    F@_1,
                                                    if Prev == undefined -> NewFValue;
                                                       true -> merge_msg_TimeseriesTableOptions(Prev, NewFValue, TrUserData)
                                                    end,
                                                    TrUserData).

skip_varint_UpdateTimeseriesTableRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_UpdateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_UpdateTimeseriesTableRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_UpdateTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_UpdateTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_UpdateTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTimeseriesTableRequest(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_UpdateTimeseriesTableRequest(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UpdateTimeseriesTableRequest(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_UpdateTimeseriesTableRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_UpdateTimeseriesTableRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_UpdateTimeseriesTableResponse(Bin, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableResponse(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_UpdateTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'UpdateTimeseriesTableResponse'{};
dfp_read_field_def_UpdateTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_UpdateTimeseriesTableResponse(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_UpdateTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_UpdateTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_UpdateTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_UpdateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_UpdateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_UpdateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_UpdateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_UpdateTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_UpdateTimeseriesTableResponse(<<>>, 0, 0, _, _) -> #'UpdateTimeseriesTableResponse'{}.

skip_varint_UpdateTimeseriesTableResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_UpdateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData);
skip_varint_UpdateTimeseriesTableResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_UpdateTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_UpdateTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_UpdateTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTimeseriesTableResponse(Rest2, 0, 0, F, TrUserData).

skip_group_UpdateTimeseriesTableResponse(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UpdateTimeseriesTableResponse(Rest, 0, Z2, FNum, TrUserData).

skip_32_UpdateTimeseriesTableResponse(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

skip_64_UpdateTimeseriesTableResponse(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_UpdateTimeseriesTableResponse(Rest, Z1, Z2, F, TrUserData).

decode_msg_DescribeTimeseriesTableRequest(Bin, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableRequest(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DescribeTimeseriesTableRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_DescribeTimeseriesTableRequest_table_name(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_DescribeTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'DescribeTimeseriesTableRequest'{table_name = F@_1};
dfp_read_field_def_DescribeTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_DescribeTimeseriesTableRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_DescribeTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_DescribeTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_DescribeTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DescribeTimeseriesTableRequest_table_name(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DescribeTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_DescribeTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_DescribeTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_DescribeTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_DescribeTimeseriesTableRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_DescribeTimeseriesTableRequest(<<>>, 0, 0, _, F@_1, _) -> #'DescribeTimeseriesTableRequest'{table_name = F@_1}.

d_field_DescribeTimeseriesTableRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_DescribeTimeseriesTableRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_DescribeTimeseriesTableRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_DescribeTimeseriesTableRequest(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_DescribeTimeseriesTableRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_DescribeTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_DescribeTimeseriesTableRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_DescribeTimeseriesTableRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_DescribeTimeseriesTableRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_DescribeTimeseriesTableRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescribeTimeseriesTableRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_DescribeTimeseriesTableRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DescribeTimeseriesTableRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_DescribeTimeseriesTableRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_DescribeTimeseriesTableRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_DescribeTimeseriesTableResponse(Bin, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableResponse(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DescribeTimeseriesTableResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_DescribeTimeseriesTableResponse_table_meta(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_DescribeTimeseriesTableResponse(<<>>, 0, 0, _, F@_1, _) -> #'DescribeTimeseriesTableResponse'{table_meta = F@_1};
dfp_read_field_def_DescribeTimeseriesTableResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_DescribeTimeseriesTableResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_DescribeTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_DescribeTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_DescribeTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DescribeTimeseriesTableResponse_table_meta(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DescribeTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_DescribeTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_DescribeTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_DescribeTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_DescribeTimeseriesTableResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_DescribeTimeseriesTableResponse(<<>>, 0, 0, _, F@_1, _) -> #'DescribeTimeseriesTableResponse'{table_meta = F@_1}.

d_field_DescribeTimeseriesTableResponse_table_meta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_DescribeTimeseriesTableResponse_table_meta(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_DescribeTimeseriesTableResponse_table_meta(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesTableMeta(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DescribeTimeseriesTableResponse(RestF,
                                                       0,
                                                       0,
                                                       F,
                                                       if Prev == undefined -> NewFValue;
                                                          true -> merge_msg_TimeseriesTableMeta(Prev, NewFValue, TrUserData)
                                                       end,
                                                       TrUserData).

skip_varint_DescribeTimeseriesTableResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_DescribeTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_DescribeTimeseriesTableResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_DescribeTimeseriesTableResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_DescribeTimeseriesTableResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_DescribeTimeseriesTableResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescribeTimeseriesTableResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_DescribeTimeseriesTableResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DescribeTimeseriesTableResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_DescribeTimeseriesTableResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_DescribeTimeseriesTableResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DescribeTimeseriesTableResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_MetaQueryCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQueryCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryCondition_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryCondition_proto_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryCondition'{type = F@_1, proto_data = F@_2};
dfp_read_field_def_MetaQueryCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaQueryCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaQueryCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaQueryCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryCondition_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_MetaQueryCondition_proto_data(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaQueryCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaQueryCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaQueryCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaQueryCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryCondition'{type = F@_1, proto_data = F@_2}.

d_field_MetaQueryCondition_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryCondition_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryCondition_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQueryConditionType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryCondition(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_MetaQueryCondition_proto_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryCondition_proto_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryCondition_proto_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryCondition(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_MetaQueryCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaQueryCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaQueryCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaQueryCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaQueryCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryCondition(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaQueryCondition(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryCondition(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaQueryCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaQueryCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_MetaQueryCompositeCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryCompositeCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_MetaQueryCompositeCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryCompositeCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryCompositeCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryCompositeCondition_sub_conditions(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryCompositeCondition(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'MetaQueryCompositeCondition'{op = F@_1, sub_conditions = lists_reverse(R1, TrUserData)};
dfp_read_field_def_MetaQueryCompositeCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaQueryCompositeCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaQueryCompositeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryCompositeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaQueryCompositeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryCompositeCondition_op(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_MetaQueryCompositeCondition_sub_conditions(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryCompositeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaQueryCompositeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaQueryCompositeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaQueryCompositeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaQueryCompositeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryCompositeCondition(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'MetaQueryCompositeCondition'{op = F@_1, sub_conditions = lists_reverse(R1, TrUserData)}.

d_field_MetaQueryCompositeCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryCompositeCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryCompositeCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQueryCompositeOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryCompositeCondition(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_MetaQueryCompositeCondition_sub_conditions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryCompositeCondition_sub_conditions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryCompositeCondition_sub_conditions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_MetaQueryCondition(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryCompositeCondition(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_MetaQueryCompositeCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaQueryCompositeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaQueryCompositeCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCompositeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaQueryCompositeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryCompositeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaQueryCompositeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryCompositeCondition(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaQueryCompositeCondition(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryCompositeCondition(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaQueryCompositeCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCompositeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaQueryCompositeCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryCompositeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_MetaQueryMeasurementCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryMeasurementCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQueryMeasurementCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryMeasurementCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryMeasurementCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryMeasurementCondition_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryMeasurementCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryMeasurementCondition'{op = F@_1, value = F@_2};
dfp_read_field_def_MetaQueryMeasurementCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaQueryMeasurementCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaQueryMeasurementCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryMeasurementCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaQueryMeasurementCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryMeasurementCondition_op(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_MetaQueryMeasurementCondition_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryMeasurementCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaQueryMeasurementCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaQueryMeasurementCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaQueryMeasurementCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaQueryMeasurementCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryMeasurementCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryMeasurementCondition'{op = F@_1, value = F@_2}.

d_field_MetaQueryMeasurementCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryMeasurementCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryMeasurementCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQuerySingleOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryMeasurementCondition(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_MetaQueryMeasurementCondition_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryMeasurementCondition_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryMeasurementCondition_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryMeasurementCondition(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_MetaQueryMeasurementCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaQueryMeasurementCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaQueryMeasurementCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryMeasurementCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaQueryMeasurementCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryMeasurementCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaQueryMeasurementCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryMeasurementCondition(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaQueryMeasurementCondition(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryMeasurementCondition(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaQueryMeasurementCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryMeasurementCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaQueryMeasurementCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryMeasurementCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_MetaQuerySourceCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQuerySourceCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQuerySourceCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQuerySourceCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQuerySourceCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQuerySourceCondition_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQuerySourceCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQuerySourceCondition'{op = F@_1, value = F@_2};
dfp_read_field_def_MetaQuerySourceCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaQuerySourceCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaQuerySourceCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQuerySourceCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaQuerySourceCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQuerySourceCondition_op(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_MetaQuerySourceCondition_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQuerySourceCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaQuerySourceCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaQuerySourceCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaQuerySourceCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaQuerySourceCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaQuerySourceCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQuerySourceCondition'{op = F@_1, value = F@_2}.

d_field_MetaQuerySourceCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQuerySourceCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQuerySourceCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQuerySingleOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQuerySourceCondition(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_MetaQuerySourceCondition_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQuerySourceCondition_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQuerySourceCondition_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQuerySourceCondition(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_MetaQuerySourceCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaQuerySourceCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaQuerySourceCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQuerySourceCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaQuerySourceCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaQuerySourceCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaQuerySourceCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQuerySourceCondition(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaQuerySourceCondition(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQuerySourceCondition(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaQuerySourceCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQuerySourceCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaQuerySourceCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQuerySourceCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_MetaQueryTagCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryTagCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQueryTagCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryTagCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryTagCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryTagCondition_tag_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryTagCondition(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryTagCondition_value(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryTagCondition(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'MetaQueryTagCondition'{op = F@_1, tag_name = F@_2, value = F@_3};
dfp_read_field_def_MetaQueryTagCondition(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_MetaQueryTagCondition(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_MetaQueryTagCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryTagCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_MetaQueryTagCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryTagCondition_op(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_MetaQueryTagCondition_tag_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_MetaQueryTagCondition_value(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryTagCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_MetaQueryTagCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_MetaQueryTagCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_MetaQueryTagCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_MetaQueryTagCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryTagCondition(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'MetaQueryTagCondition'{op = F@_1, tag_name = F@_2, value = F@_3}.

d_field_MetaQueryTagCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryTagCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryTagCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQuerySingleOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryTagCondition(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_MetaQueryTagCondition_tag_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryTagCondition_tag_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryTagCondition_tag_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryTagCondition(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_MetaQueryTagCondition_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryTagCondition_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryTagCondition_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryTagCondition(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_MetaQueryTagCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_MetaQueryTagCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_MetaQueryTagCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryTagCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_MetaQueryTagCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryTagCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_MetaQueryTagCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryTagCondition(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_MetaQueryTagCondition(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryTagCondition(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_MetaQueryTagCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryTagCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_MetaQueryTagCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryTagCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_MetaQueryAttributeCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryAttributeCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQueryAttributeCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryAttributeCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryAttributeCondition(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryAttributeCondition_attr_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryAttributeCondition(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_MetaQueryAttributeCondition_value(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_MetaQueryAttributeCondition(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'MetaQueryAttributeCondition'{op = F@_1, attr_name = F@_2, value = F@_3};
dfp_read_field_def_MetaQueryAttributeCondition(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_MetaQueryAttributeCondition(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_MetaQueryAttributeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryAttributeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_MetaQueryAttributeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryAttributeCondition_op(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_MetaQueryAttributeCondition_attr_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_MetaQueryAttributeCondition_value(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryAttributeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_MetaQueryAttributeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_MetaQueryAttributeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_MetaQueryAttributeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_MetaQueryAttributeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryAttributeCondition(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'MetaQueryAttributeCondition'{op = F@_1, attr_name = F@_2, value = F@_3}.

d_field_MetaQueryAttributeCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryAttributeCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryAttributeCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQuerySingleOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryAttributeCondition(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_MetaQueryAttributeCondition_attr_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryAttributeCondition_attr_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryAttributeCondition_attr_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryAttributeCondition(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_MetaQueryAttributeCondition_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_MetaQueryAttributeCondition_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_MetaQueryAttributeCondition_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_MetaQueryAttributeCondition(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_MetaQueryAttributeCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_MetaQueryAttributeCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_MetaQueryAttributeCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryAttributeCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_MetaQueryAttributeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryAttributeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_MetaQueryAttributeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryAttributeCondition(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_MetaQueryAttributeCondition(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryAttributeCondition(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_MetaQueryAttributeCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryAttributeCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_MetaQueryAttributeCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_MetaQueryAttributeCondition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_MetaQueryUpdateTimeCondition(Bin, TrUserData) -> dfp_read_field_def_MetaQueryUpdateTimeCondition(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MetaQueryUpdateTimeCondition(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryUpdateTimeCondition_op(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryUpdateTimeCondition(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaQueryUpdateTimeCondition_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaQueryUpdateTimeCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryUpdateTimeCondition'{op = F@_1, value = F@_2};
dfp_read_field_def_MetaQueryUpdateTimeCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaQueryUpdateTimeCondition(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaQueryUpdateTimeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaQueryUpdateTimeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaQueryUpdateTimeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_MetaQueryUpdateTimeCondition_op(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_MetaQueryUpdateTimeCondition_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaQueryUpdateTimeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaQueryUpdateTimeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaQueryUpdateTimeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaQueryUpdateTimeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaQueryUpdateTimeCondition(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaQueryUpdateTimeCondition(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'MetaQueryUpdateTimeCondition'{op = F@_1, value = F@_2}.

d_field_MetaQueryUpdateTimeCondition_op(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryUpdateTimeCondition_op(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryUpdateTimeCondition_op(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaQuerySingleOperator(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_MetaQueryUpdateTimeCondition(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_MetaQueryUpdateTimeCondition_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaQueryUpdateTimeCondition_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaQueryUpdateTimeCondition_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_MetaQueryUpdateTimeCondition(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_MetaQueryUpdateTimeCondition(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaQueryUpdateTimeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaQueryUpdateTimeCondition(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryUpdateTimeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaQueryUpdateTimeCondition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaQueryUpdateTimeCondition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaQueryUpdateTimeCondition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaQueryUpdateTimeCondition(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaQueryUpdateTimeCondition(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaQueryUpdateTimeCondition(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaQueryUpdateTimeCondition(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryUpdateTimeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaQueryUpdateTimeCondition(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaQueryUpdateTimeCondition(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_TimeseriesKey(Bin, TrUserData) -> dfp_read_field_def_TimeseriesKey(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesKey(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_measurement(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_source(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_tags(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesKey'{measurement = F@_1, source = F@_2, tags = F@_3};
dfp_read_field_def_TimeseriesKey(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesKey(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesKey(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesKey(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesKey(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesKey_measurement(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesKey_source(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_TimeseriesKey_tags(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesKey(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesKey'{measurement = F@_1, source = F@_2, tags = F@_3}.

d_field_TimeseriesKey_measurement(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_measurement(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_measurement(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_TimeseriesKey_source(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_source(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_source(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_TimeseriesKey_tags(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_tags(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_tags(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesKey(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesKey(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesKey(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesKey(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesKey(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesKey(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesKey(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesKey(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesKey(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesKey(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_TimeseriesMeta(Bin, TrUserData) -> dfp_read_field_def_TimeseriesMeta(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesMeta(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesMeta_time_series_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesMeta(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesMeta_attributes(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesMeta(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesMeta_update_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesMeta(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesMeta'{time_series_key = F@_1, attributes = F@_2, update_time = F@_3};
dfp_read_field_def_TimeseriesMeta(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesMeta(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesMeta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesMeta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesMeta(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesMeta_time_series_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesMeta_attributes(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_TimeseriesMeta_update_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesMeta(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesMeta(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesMeta'{time_series_key = F@_1, attributes = F@_2, update_time = F@_3}.

d_field_TimeseriesMeta_time_series_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesMeta_time_series_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesMeta_time_series_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesKey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesMeta(RestF,
                                      0,
                                      0,
                                      F,
                                      if Prev == undefined -> NewFValue;
                                         true -> merge_msg_TimeseriesKey(Prev, NewFValue, TrUserData)
                                      end,
                                      F@_2,
                                      F@_3,
                                      TrUserData).

d_field_TimeseriesMeta_attributes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesMeta_attributes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesMeta_attributes(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesMeta(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_TimeseriesMeta_update_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesMeta_update_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesMeta_update_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesMeta(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesMeta(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesMeta(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesMeta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesMeta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesMeta(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesMeta(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesMeta(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesMeta(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesMeta(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesMeta(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesMeta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_QueryTimeseriesMetaRequest(Bin, TrUserData) ->
    dfp_read_field_def_QueryTimeseriesMetaRequest(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_QueryTimeseriesMetaRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_QueryTimeseriesMetaRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_QueryTimeseriesMetaRequest_condition(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_QueryTimeseriesMetaRequest_get_total_hit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaRequest(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_QueryTimeseriesMetaRequest_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaRequest(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_QueryTimeseriesMetaRequest_limit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'QueryTimeseriesMetaRequest'{table_name = F@_1, condition = F@_2, get_total_hit = F@_3, token = F@_4, limit = F@_5};
dfp_read_field_def_QueryTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_QueryTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_QueryTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_QueryTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_QueryTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_QueryTimeseriesMetaRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_QueryTimeseriesMetaRequest_condition(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_QueryTimeseriesMetaRequest_get_total_hit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_QueryTimeseriesMetaRequest_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_QueryTimeseriesMetaRequest_limit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_QueryTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_QueryTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_QueryTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_QueryTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_QueryTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'QueryTimeseriesMetaRequest'{table_name = F@_1, condition = F@_2, get_total_hit = F@_3, token = F@_4, limit = F@_5}.

d_field_QueryTimeseriesMetaRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_QueryTimeseriesMetaRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_QueryTimeseriesMetaRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_QueryTimeseriesMetaRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_QueryTimeseriesMetaRequest_condition(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_QueryTimeseriesMetaRequest_condition(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_QueryTimeseriesMetaRequest_condition(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_MetaQueryCondition(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryTimeseriesMetaRequest(RestF,
                                                  0,
                                                  0,
                                                  F,
                                                  F@_1,
                                                  if Prev == undefined -> NewFValue;
                                                     true -> merge_msg_MetaQueryCondition(Prev, NewFValue, TrUserData)
                                                  end,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData).

d_field_QueryTimeseriesMetaRequest_get_total_hit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_QueryTimeseriesMetaRequest_get_total_hit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_QueryTimeseriesMetaRequest_get_total_hit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_QueryTimeseriesMetaRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_QueryTimeseriesMetaRequest_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_QueryTimeseriesMetaRequest_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_QueryTimeseriesMetaRequest_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_QueryTimeseriesMetaRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_QueryTimeseriesMetaRequest_limit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_QueryTimeseriesMetaRequest_limit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_QueryTimeseriesMetaRequest_limit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_QueryTimeseriesMetaRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_QueryTimeseriesMetaRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_QueryTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_QueryTimeseriesMetaRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_QueryTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    skip_length_delimited_QueryTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_QueryTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryTimeseriesMetaRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_QueryTimeseriesMetaRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryTimeseriesMetaRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_QueryTimeseriesMetaRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_QueryTimeseriesMetaRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_QueryTimeseriesMetaResponse(Bin, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaResponse(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_QueryTimeseriesMetaResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryTimeseriesMetaResponse_timeseries_metas(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaResponse(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryTimeseriesMetaResponse_total_hit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaResponse(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_QueryTimeseriesMetaResponse_next_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_QueryTimeseriesMetaResponse(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) -> #'QueryTimeseriesMetaResponse'{timeseries_metas = lists_reverse(R1, TrUserData), total_hit = F@_2, next_token = F@_3};
dfp_read_field_def_QueryTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_QueryTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_QueryTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_QueryTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_QueryTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_QueryTimeseriesMetaResponse_timeseries_metas(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_QueryTimeseriesMetaResponse_total_hit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_QueryTimeseriesMetaResponse_next_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_QueryTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_QueryTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_QueryTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_QueryTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_QueryTimeseriesMetaResponse(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) -> #'QueryTimeseriesMetaResponse'{timeseries_metas = lists_reverse(R1, TrUserData), total_hit = F@_2, next_token = F@_3}.

d_field_QueryTimeseriesMetaResponse_timeseries_metas(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryTimeseriesMetaResponse_timeseries_metas(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryTimeseriesMetaResponse_timeseries_metas(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesMeta(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_QueryTimeseriesMetaResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_QueryTimeseriesMetaResponse_total_hit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryTimeseriesMetaResponse_total_hit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryTimeseriesMetaResponse_total_hit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_QueryTimeseriesMetaResponse(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_QueryTimeseriesMetaResponse_next_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_QueryTimeseriesMetaResponse_next_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_QueryTimeseriesMetaResponse_next_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_QueryTimeseriesMetaResponse(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_QueryTimeseriesMetaResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_QueryTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_QueryTimeseriesMetaResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_QueryTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_QueryTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_QueryTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryTimeseriesMetaResponse(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_QueryTimeseriesMetaResponse(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryTimeseriesMetaResponse(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_QueryTimeseriesMetaResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_QueryTimeseriesMetaResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_QueryTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_TimeseriesRows(Bin, TrUserData) -> dfp_read_field_def_TimeseriesRows(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesRows(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_rows_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesRows'{type = F@_1, rows_data = F@_2, flatbuffer_crc32c = F@_3};
dfp_read_field_def_TimeseriesRows(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesRows(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesRows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesRows(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_TimeseriesRows_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesRows_rows_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesRows(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesRows'{type = F@_1, rows_data = F@_2, flatbuffer_crc32c = F@_3}.

d_field_TimeseriesRows_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RowsSerializeType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_TimeseriesRows_rows_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_rows_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_rows_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_TimeseriesRows_flatbuffer_crc32c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_flatbuffer_crc32c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesRows(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesRows(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesRows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesRows(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesRows(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesRows(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesRows(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesRows(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesRows(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_PutTimeseriesDataRequest(Bin, TrUserData) -> dfp_read_field_def_PutTimeseriesDataRequest(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PutTimeseriesDataRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PutTimeseriesDataRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PutTimeseriesDataRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PutTimeseriesDataRequest_rows_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PutTimeseriesDataRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PutTimeseriesDataRequest_meta_update_mode(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PutTimeseriesDataRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PutTimeseriesDataRequest'{table_name = F@_1, rows_data = F@_2, meta_update_mode = F@_3};
dfp_read_field_def_PutTimeseriesDataRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_PutTimeseriesDataRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_PutTimeseriesDataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutTimeseriesDataRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_PutTimeseriesDataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutTimeseriesDataRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_PutTimeseriesDataRequest_rows_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_PutTimeseriesDataRequest_meta_update_mode(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_PutTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_PutTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_PutTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_PutTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_PutTimeseriesDataRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PutTimeseriesDataRequest'{table_name = F@_1, rows_data = F@_2, meta_update_mode = F@_3}.

d_field_PutTimeseriesDataRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PutTimeseriesDataRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PutTimeseriesDataRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PutTimeseriesDataRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_PutTimeseriesDataRequest_rows_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PutTimeseriesDataRequest_rows_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PutTimeseriesDataRequest_rows_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesRows(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_PutTimeseriesDataRequest(RestF,
                                                0,
                                                0,
                                                F,
                                                F@_1,
                                                if Prev == undefined -> NewFValue;
                                                   true -> merge_msg_TimeseriesRows(Prev, NewFValue, TrUserData)
                                                end,
                                                F@_3,
                                                TrUserData).

d_field_PutTimeseriesDataRequest_meta_update_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PutTimeseriesDataRequest_meta_update_mode(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PutTimeseriesDataRequest_meta_update_mode(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MetaUpdateMode(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_PutTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_PutTimeseriesDataRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_PutTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_PutTimeseriesDataRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PutTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_PutTimeseriesDataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_PutTimeseriesDataRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_PutTimeseriesDataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutTimeseriesDataRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_PutTimeseriesDataRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutTimeseriesDataRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_PutTimeseriesDataRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PutTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_PutTimeseriesDataRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PutTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_FailedRowInfo(Bin, TrUserData) -> dfp_read_field_def_FailedRowInfo(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_FailedRowInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_FailedRowInfo_row_index(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_FailedRowInfo(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_FailedRowInfo_error_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_FailedRowInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_FailedRowInfo_error_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_FailedRowInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'FailedRowInfo'{row_index = F@_1, error_code = F@_2, error_message = F@_3};
dfp_read_field_def_FailedRowInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_FailedRowInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_FailedRowInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_FailedRowInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_FailedRowInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_FailedRowInfo_row_index(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_FailedRowInfo_error_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_FailedRowInfo_error_message(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_FailedRowInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_FailedRowInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_FailedRowInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_FailedRowInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_FailedRowInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_FailedRowInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'FailedRowInfo'{row_index = F@_1, error_code = F@_2, error_message = F@_3}.

d_field_FailedRowInfo_row_index(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_FailedRowInfo_row_index(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_FailedRowInfo_row_index(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_FailedRowInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_FailedRowInfo_error_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_FailedRowInfo_error_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_FailedRowInfo_error_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_FailedRowInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_FailedRowInfo_error_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_FailedRowInfo_error_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_FailedRowInfo_error_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_FailedRowInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_FailedRowInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_FailedRowInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_FailedRowInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_FailedRowInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_FailedRowInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_FailedRowInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_FailedRowInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FailedRowInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_FailedRowInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FailedRowInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_FailedRowInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_FailedRowInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_FailedRowInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_FailedRowInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_MetaUpdateStatus(Bin, TrUserData) -> dfp_read_field_def_MetaUpdateStatus(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_MetaUpdateStatus(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_pfield_MetaUpdateStatus_row_ids(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaUpdateStatus(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaUpdateStatus_row_ids(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaUpdateStatus(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_pfield_MetaUpdateStatus_meta_update_times(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaUpdateStatus(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_MetaUpdateStatus_meta_update_times(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_MetaUpdateStatus(<<>>, 0, 0, _, R1, R2, TrUserData) -> #'MetaUpdateStatus'{row_ids = lists_reverse(R1, TrUserData), meta_update_times = lists_reverse(R2, TrUserData)};
dfp_read_field_def_MetaUpdateStatus(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_MetaUpdateStatus(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_MetaUpdateStatus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_MetaUpdateStatus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_MetaUpdateStatus(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_pfield_MetaUpdateStatus_row_ids(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        8 -> d_field_MetaUpdateStatus_row_ids(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_pfield_MetaUpdateStatus_meta_update_times(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_MetaUpdateStatus_meta_update_times(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MetaUpdateStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_MetaUpdateStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_MetaUpdateStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_MetaUpdateStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_MetaUpdateStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_MetaUpdateStatus(<<>>, 0, 0, _, R1, R2, TrUserData) -> #'MetaUpdateStatus'{row_ids = lists_reverse(R1, TrUserData), meta_update_times = lists_reverse(R2, TrUserData)}.

d_field_MetaUpdateStatus_row_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaUpdateStatus_row_ids(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaUpdateStatus_row_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_MetaUpdateStatus(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_pfield_MetaUpdateStatus_row_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_pfield_MetaUpdateStatus_row_ids(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_pfield_MetaUpdateStatus_row_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_MetaUpdateStatus_row_ids(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_MetaUpdateStatus(Rest2, 0, 0, F, NewSeq, F@_2, TrUserData).

d_packed_field_MetaUpdateStatus_row_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_MetaUpdateStatus_row_ids(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_MetaUpdateStatus_row_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_MetaUpdateStatus_row_ids(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_MetaUpdateStatus_row_ids(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_MetaUpdateStatus_meta_update_times(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_MetaUpdateStatus_meta_update_times(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_MetaUpdateStatus_meta_update_times(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_MetaUpdateStatus(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_MetaUpdateStatus_meta_update_times(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_pfield_MetaUpdateStatus_meta_update_times(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_pfield_MetaUpdateStatus_meta_update_times(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_MetaUpdateStatus_meta_update_times(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_MetaUpdateStatus(Rest2, 0, 0, F, F@_1, NewSeq, TrUserData).

d_packed_field_MetaUpdateStatus_meta_update_times(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_MetaUpdateStatus_meta_update_times(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_MetaUpdateStatus_meta_update_times(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_MetaUpdateStatus_meta_update_times(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_MetaUpdateStatus_meta_update_times(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

skip_varint_MetaUpdateStatus(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_MetaUpdateStatus(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_MetaUpdateStatus(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaUpdateStatus(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_MetaUpdateStatus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_MetaUpdateStatus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_MetaUpdateStatus(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MetaUpdateStatus(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_MetaUpdateStatus(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MetaUpdateStatus(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_MetaUpdateStatus(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaUpdateStatus(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_MetaUpdateStatus(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_MetaUpdateStatus(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_PutTimeseriesDataResponse(Bin, TrUserData) -> dfp_read_field_def_PutTimeseriesDataResponse(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PutTimeseriesDataResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_PutTimeseriesDataResponse_failed_rows(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_PutTimeseriesDataResponse(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_PutTimeseriesDataResponse_meta_update_status(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_PutTimeseriesDataResponse(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #'PutTimeseriesDataResponse'{failed_rows = lists_reverse(R1, TrUserData), meta_update_status = F@_2};
dfp_read_field_def_PutTimeseriesDataResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_PutTimeseriesDataResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_PutTimeseriesDataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_PutTimeseriesDataResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_PutTimeseriesDataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_PutTimeseriesDataResponse_failed_rows(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_PutTimeseriesDataResponse_meta_update_status(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PutTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_PutTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_PutTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_PutTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_PutTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_PutTimeseriesDataResponse(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #'PutTimeseriesDataResponse'{failed_rows = lists_reverse(R1, TrUserData), meta_update_status = F@_2}.

d_field_PutTimeseriesDataResponse_failed_rows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_PutTimeseriesDataResponse_failed_rows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_PutTimeseriesDataResponse_failed_rows(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_FailedRowInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_PutTimeseriesDataResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_PutTimeseriesDataResponse_meta_update_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_PutTimeseriesDataResponse_meta_update_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_PutTimeseriesDataResponse_meta_update_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_MetaUpdateStatus(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_PutTimeseriesDataResponse(RestF,
                                                 0,
                                                 0,
                                                 F,
                                                 F@_1,
                                                 if Prev == undefined -> NewFValue;
                                                    true -> merge_msg_MetaUpdateStatus(Prev, NewFValue, TrUserData)
                                                 end,
                                                 TrUserData).

skip_varint_PutTimeseriesDataResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_PutTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_PutTimeseriesDataResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_PutTimeseriesDataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_PutTimeseriesDataResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_PutTimeseriesDataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutTimeseriesDataResponse(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_PutTimeseriesDataResponse(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PutTimeseriesDataResponse(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_PutTimeseriesDataResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_PutTimeseriesDataResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_PutTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_GetTimeseriesDataRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetTimeseriesDataRequest(Bin,
                                                0,
                                                0,
                                                0,
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                id(undefined, TrUserData),
                                                TrUserData).

dfp_read_field_def_GetTimeseriesDataRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_GetTimeseriesDataRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_GetTimeseriesDataRequest_time_series_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_GetTimeseriesDataRequest_begin_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_GetTimeseriesDataRequest_end_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    d_field_GetTimeseriesDataRequest_specific_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_GetTimeseriesDataRequest_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_GetTimeseriesDataRequest_limit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GetTimeseriesDataRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'GetTimeseriesDataRequest'{table_name = F@_1, time_series_key = F@_2, begin_time = F@_3, end_time = F@_4, specific_time = F@_5, token = F@_6, limit = F@_7};
dfp_read_field_def_GetTimeseriesDataRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_GetTimeseriesDataRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_GetTimeseriesDataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_GetTimeseriesDataRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_GetTimeseriesDataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_GetTimeseriesDataRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> d_field_GetTimeseriesDataRequest_time_series_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_GetTimeseriesDataRequest_begin_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        32 -> d_field_GetTimeseriesDataRequest_end_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        40 -> d_field_GetTimeseriesDataRequest_specific_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> d_field_GetTimeseriesDataRequest_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_GetTimeseriesDataRequest_limit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_GetTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_GetTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_GetTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_GetTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_GetTimeseriesDataRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_GetTimeseriesDataRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'GetTimeseriesDataRequest'{table_name = F@_1, time_series_key = F@_2, begin_time = F@_3, end_time = F@_4, specific_time = F@_5, token = F@_6, limit = F@_7}.

d_field_GetTimeseriesDataRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_GetTimeseriesDataRequest_time_series_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_time_series_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_time_series_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesKey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_GetTimeseriesDataRequest(RestF,
                                                0,
                                                0,
                                                F,
                                                F@_1,
                                                if Prev == undefined -> NewFValue;
                                                   true -> merge_msg_TimeseriesKey(Prev, NewFValue, TrUserData)
                                                end,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                TrUserData).

d_field_GetTimeseriesDataRequest_begin_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_begin_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_begin_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_GetTimeseriesDataRequest_end_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_end_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_end_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_GetTimeseriesDataRequest_specific_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_specific_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_specific_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_GetTimeseriesDataRequest_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_GetTimeseriesDataRequest_limit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_GetTimeseriesDataRequest_limit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_GetTimeseriesDataRequest_limit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GetTimeseriesDataRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_GetTimeseriesDataRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_GetTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_GetTimeseriesDataRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_GetTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_GetTimeseriesDataRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_GetTimeseriesDataRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_GetTimeseriesDataRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetTimeseriesDataRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_GetTimeseriesDataRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetTimeseriesDataRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_GetTimeseriesDataRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_GetTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_GetTimeseriesDataRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_GetTimeseriesDataRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_GetTimeseriesDataResponse(Bin, TrUserData) -> dfp_read_field_def_GetTimeseriesDataResponse(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetTimeseriesDataResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_GetTimeseriesDataResponse_rows_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_GetTimeseriesDataResponse(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_GetTimeseriesDataResponse_next_token(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_GetTimeseriesDataResponse(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'GetTimeseriesDataResponse'{rows_data = F@_1, next_token = F@_2};
dfp_read_field_def_GetTimeseriesDataResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_GetTimeseriesDataResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_GetTimeseriesDataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_GetTimeseriesDataResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_GetTimeseriesDataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_GetTimeseriesDataResponse_rows_data(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_GetTimeseriesDataResponse_next_token(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_GetTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_GetTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_GetTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_GetTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_GetTimeseriesDataResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_GetTimeseriesDataResponse(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'GetTimeseriesDataResponse'{rows_data = F@_1, next_token = F@_2}.

d_field_GetTimeseriesDataResponse_rows_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_GetTimeseriesDataResponse_rows_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_GetTimeseriesDataResponse_rows_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_GetTimeseriesDataResponse(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_GetTimeseriesDataResponse_next_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_GetTimeseriesDataResponse_next_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_GetTimeseriesDataResponse_next_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_GetTimeseriesDataResponse(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_GetTimeseriesDataResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_GetTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_GetTimeseriesDataResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_GetTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_GetTimeseriesDataResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_GetTimeseriesDataResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_GetTimeseriesDataResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetTimeseriesDataResponse(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_GetTimeseriesDataResponse(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetTimeseriesDataResponse(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_GetTimeseriesDataResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_GetTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_GetTimeseriesDataResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_GetTimeseriesDataResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_UpdateTimeseriesMetaRequest(Bin, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaRequest(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_UpdateTimeseriesMetaRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UpdateTimeseriesMetaRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UpdateTimeseriesMetaRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UpdateTimeseriesMetaRequest_timeseries_meta(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UpdateTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'UpdateTimeseriesMetaRequest'{table_name = F@_1, timeseries_meta = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UpdateTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_UpdateTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_UpdateTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_UpdateTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_UpdateTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UpdateTimeseriesMetaRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_UpdateTimeseriesMetaRequest_timeseries_meta(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UpdateTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_UpdateTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_UpdateTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_UpdateTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_UpdateTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_UpdateTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'UpdateTimeseriesMetaRequest'{table_name = F@_1, timeseries_meta = lists_reverse(R1, TrUserData)}.

d_field_UpdateTimeseriesMetaRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UpdateTimeseriesMetaRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UpdateTimeseriesMetaRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UpdateTimeseriesMetaRequest(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_UpdateTimeseriesMetaRequest_timeseries_meta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UpdateTimeseriesMetaRequest_timeseries_meta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UpdateTimeseriesMetaRequest_timeseries_meta(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesMeta(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UpdateTimeseriesMetaRequest(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UpdateTimeseriesMetaRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_UpdateTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_UpdateTimeseriesMetaRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_UpdateTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_UpdateTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_UpdateTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTimeseriesMetaRequest(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_UpdateTimeseriesMetaRequest(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UpdateTimeseriesMetaRequest(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_UpdateTimeseriesMetaRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_UpdateTimeseriesMetaRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_UpdateTimeseriesMetaResponse(Bin, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaResponse(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_UpdateTimeseriesMetaResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_UpdateTimeseriesMetaResponse_failed_rows(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_UpdateTimeseriesMetaResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'UpdateTimeseriesMetaResponse'{failed_rows = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UpdateTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_UpdateTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_UpdateTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_UpdateTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_UpdateTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UpdateTimeseriesMetaResponse_failed_rows(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UpdateTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_UpdateTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_UpdateTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_UpdateTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_UpdateTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_UpdateTimeseriesMetaResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'UpdateTimeseriesMetaResponse'{failed_rows = lists_reverse(R1, TrUserData)}.

d_field_UpdateTimeseriesMetaResponse_failed_rows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_UpdateTimeseriesMetaResponse_failed_rows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_UpdateTimeseriesMetaResponse_failed_rows(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_FailedRowInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UpdateTimeseriesMetaResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UpdateTimeseriesMetaResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_UpdateTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_UpdateTimeseriesMetaResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_UpdateTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_UpdateTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_UpdateTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTimeseriesMetaResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_UpdateTimeseriesMetaResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UpdateTimeseriesMetaResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_UpdateTimeseriesMetaResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_UpdateTimeseriesMetaResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UpdateTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_DeleteTimeseriesMetaRequest(Bin, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaRequest(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_DeleteTimeseriesMetaRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_DeleteTimeseriesMetaRequest_table_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_DeleteTimeseriesMetaRequest(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_DeleteTimeseriesMetaRequest_timeseries_key(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_DeleteTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'DeleteTimeseriesMetaRequest'{table_name = F@_1, timeseries_key = lists_reverse(R1, TrUserData)};
dfp_read_field_def_DeleteTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_DeleteTimeseriesMetaRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_DeleteTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_DeleteTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_DeleteTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DeleteTimeseriesMetaRequest_table_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_DeleteTimeseriesMetaRequest_timeseries_key(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DeleteTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_DeleteTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_DeleteTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_DeleteTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_DeleteTimeseriesMetaRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_DeleteTimeseriesMetaRequest(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'DeleteTimeseriesMetaRequest'{table_name = F@_1, timeseries_key = lists_reverse(R1, TrUserData)}.

d_field_DeleteTimeseriesMetaRequest_table_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_DeleteTimeseriesMetaRequest_table_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_DeleteTimeseriesMetaRequest_table_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_DeleteTimeseriesMetaRequest(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_DeleteTimeseriesMetaRequest_timeseries_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_DeleteTimeseriesMetaRequest_timeseries_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_DeleteTimeseriesMetaRequest_timeseries_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesKey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DeleteTimeseriesMetaRequest(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_DeleteTimeseriesMetaRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_DeleteTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_DeleteTimeseriesMetaRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_DeleteTimeseriesMetaRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_DeleteTimeseriesMetaRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_DeleteTimeseriesMetaRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTimeseriesMetaRequest(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_DeleteTimeseriesMetaRequest(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteTimeseriesMetaRequest(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_DeleteTimeseriesMetaRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_DeleteTimeseriesMetaRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_DeleteTimeseriesMetaResponse(Bin, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaResponse(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_DeleteTimeseriesMetaResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_DeleteTimeseriesMetaResponse_failed_rows(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_DeleteTimeseriesMetaResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'DeleteTimeseriesMetaResponse'{failed_rows = lists_reverse(R1, TrUserData)};
dfp_read_field_def_DeleteTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_DeleteTimeseriesMetaResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_DeleteTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_DeleteTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_DeleteTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DeleteTimeseriesMetaResponse_failed_rows(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DeleteTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_DeleteTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_DeleteTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_DeleteTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_DeleteTimeseriesMetaResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_DeleteTimeseriesMetaResponse(<<>>, 0, 0, _, R1, TrUserData) -> #'DeleteTimeseriesMetaResponse'{failed_rows = lists_reverse(R1, TrUserData)}.

d_field_DeleteTimeseriesMetaResponse_failed_rows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_DeleteTimeseriesMetaResponse_failed_rows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_DeleteTimeseriesMetaResponse_failed_rows(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_FailedRowInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DeleteTimeseriesMetaResponse(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_DeleteTimeseriesMetaResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_DeleteTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_DeleteTimeseriesMetaResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_DeleteTimeseriesMetaResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_DeleteTimeseriesMetaResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_DeleteTimeseriesMetaResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTimeseriesMetaResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_DeleteTimeseriesMetaResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteTimeseriesMetaResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_DeleteTimeseriesMetaResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_DeleteTimeseriesMetaResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_DeleteTimeseriesMetaResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_TimeseriesField(Bin, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesField(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_field_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_int(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_string(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_bool(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<41, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_double(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_binary(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'TimeseriesField'{field_name = F@_1, value_int = F@_2, value_string = F@_3, value_bool = F@_4, value_double = F@_5, value_binary = F@_6};
dfp_read_field_def_TimeseriesField(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_TimeseriesField(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_TimeseriesField(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_TimeseriesField(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_TimeseriesField(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesField_field_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_TimeseriesField_value_int(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_TimeseriesField_value_string(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_TimeseriesField_value_bool(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        41 -> d_field_TimeseriesField_value_double(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_TimeseriesField_value_binary(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesField(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'TimeseriesField'{field_name = F@_1, value_int = F@_2, value_string = F@_3, value_bool = F@_4, value_double = F@_5, value_binary = F@_6}.

d_field_TimeseriesField_field_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_field_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_field_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_int(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_value_int(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_int(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_string(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_TimeseriesField_value_string(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_string(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_bool(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_value_bool(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_bool(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_double(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(infinity, TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id('-infinity', TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(nan, TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(Value, TrUserData), F@_6, TrUserData).

d_field_TimeseriesField_value_binary(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_TimeseriesField_value_binary(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_binary(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_TimeseriesField(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_TimeseriesField(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_TimeseriesField(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_TimeseriesField(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_TimeseriesField(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesField(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_TimeseriesField(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesField(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_TimeseriesField(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_TimeseriesField(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_TimeseriesRow(Bin, TrUserData) -> dfp_read_field_def_TimeseriesRow(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesRow(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_timeseries_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_fields(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_meta_cache_update_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) -> #'TimeseriesRow'{timeseries_key = F@_1, time = F@_2, fields = lists_reverse(R1, TrUserData), meta_cache_update_time = F@_4};
dfp_read_field_def_TimeseriesRow(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_TimeseriesRow(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_TimeseriesRow(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesRow(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_TimeseriesRow(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesRow_timeseries_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_TimeseriesRow_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_TimeseriesRow_fields(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_TimeseriesRow_meta_cache_update_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesRow(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) -> #'TimeseriesRow'{timeseries_key = F@_1, time = F@_2, fields = lists_reverse(R1, TrUserData), meta_cache_update_time = F@_4}.

d_field_TimeseriesRow_timeseries_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_timeseries_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_timeseries_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesKey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRow(RestF,
                                     0,
                                     0,
                                     F,
                                     if Prev == undefined -> NewFValue;
                                        true -> merge_msg_TimeseriesKey(Prev, NewFValue, TrUserData)
                                     end,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData).

d_field_TimeseriesRow_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_TimeseriesRow_fields(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_fields(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_fields(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesField(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_TimeseriesRow_meta_cache_update_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_meta_cache_update_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_meta_cache_update_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_TimeseriesRow(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_TimeseriesRow(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_TimeseriesRow(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesRow(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_TimeseriesRow(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesRow(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_TimeseriesRow(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesRow(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_TimeseriesRow(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_TimeseriesRow(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_TimeseriesPBRows(Bin, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_TimeseriesPBRows(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TimeseriesPBRows_rows(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TimeseriesPBRows(<<>>, 0, 0, _, R1, TrUserData) -> #'TimeseriesPBRows'{rows = lists_reverse(R1, TrUserData)};
dfp_read_field_def_TimeseriesPBRows(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TimeseriesPBRows(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TimeseriesPBRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesPBRows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TimeseriesPBRows(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesPBRows_rows(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesPBRows(<<>>, 0, 0, _, R1, TrUserData) -> #'TimeseriesPBRows'{rows = lists_reverse(R1, TrUserData)}.

d_field_TimeseriesPBRows_rows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TimeseriesPBRows_rows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TimeseriesPBRows_rows(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesRow(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesPBRows(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_TimeseriesPBRows(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TimeseriesPBRows(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TimeseriesPBRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesPBRows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TimeseriesPBRows(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesPBRows(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TimeseriesPBRows(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesPBRows(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TimeseriesPBRows(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TimeseriesPBRows(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ErrorResponse(Bin, TrUserData) -> dfp_read_field_def_ErrorResponse(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ErrorResponse(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ErrorResponse_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ErrorResponse(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ErrorResponse_message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ErrorResponse(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'ErrorResponse'{code = F@_1, message = F@_2};
dfp_read_field_def_ErrorResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_ErrorResponse(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_ErrorResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_ErrorResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_ErrorResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ErrorResponse_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_ErrorResponse_message(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ErrorResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_ErrorResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_ErrorResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_ErrorResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_ErrorResponse(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_ErrorResponse(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'ErrorResponse'{code = F@_1, message = F@_2}.

d_field_ErrorResponse_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ErrorResponse_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ErrorResponse_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ErrorResponse(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_ErrorResponse_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ErrorResponse_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ErrorResponse_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ErrorResponse(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_ErrorResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_ErrorResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_ErrorResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ErrorResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_ErrorResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_ErrorResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_ErrorResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ErrorResponse(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_ErrorResponse(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ErrorResponse(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_ErrorResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ErrorResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_ErrorResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ErrorResponse(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_MetaQueryConditionType(1) -> 'COMPOSITE_CONDITION';
d_enum_MetaQueryConditionType(2) -> 'MEASUREMENT_CONDITION';
d_enum_MetaQueryConditionType(3) -> 'SOURCE_CONDITION';
d_enum_MetaQueryConditionType(4) -> 'TAG_CONDITION';
d_enum_MetaQueryConditionType(5) -> 'UPDATE_TIME_CONDITION';
d_enum_MetaQueryConditionType(6) -> 'ATTRIBUTE_CONDITION';
d_enum_MetaQueryConditionType(V) -> V.

d_enum_MetaQueryCompositeOperator(1) -> 'OP_AND';
d_enum_MetaQueryCompositeOperator(2) -> 'OP_OR';
d_enum_MetaQueryCompositeOperator(3) -> 'OP_NOT';
d_enum_MetaQueryCompositeOperator(V) -> V.

d_enum_MetaQuerySingleOperator(1) -> 'OP_EQUAL';
d_enum_MetaQuerySingleOperator(2) -> 'OP_GREATER_THAN';
d_enum_MetaQuerySingleOperator(3) -> 'OP_GREATER_EQUAL';
d_enum_MetaQuerySingleOperator(4) -> 'OP_LESS_THAN';
d_enum_MetaQuerySingleOperator(5) -> 'OP_LESS_EQUAL';
d_enum_MetaQuerySingleOperator(6) -> 'OP_PREFIX';
d_enum_MetaQuerySingleOperator(V) -> V.

d_enum_RowsSerializeType(0) -> 'RST_FLAT_BUFFER';
d_enum_RowsSerializeType(1) -> 'RST_PLAIN_BUFFER';
d_enum_RowsSerializeType(2) -> 'RST_PROTO_BUFFER';
d_enum_RowsSerializeType(V) -> V.

d_enum_MetaUpdateMode(0) -> 'MUM_NORMAL';
d_enum_MetaUpdateMode(1) -> 'MUM_IGNORE';
d_enum_MetaUpdateMode(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesTableOptions' -> merge_msg_TimeseriesTableOptions(Prev, New, TrUserData);
        'TimeseriesTableMeta' -> merge_msg_TimeseriesTableMeta(Prev, New, TrUserData);
        'CreateTimeseriesTableRequest' -> merge_msg_CreateTimeseriesTableRequest(Prev, New, TrUserData);
        'CreateTimeseriesTableResponse' -> merge_msg_CreateTimeseriesTableResponse(Prev, New, TrUserData);
        'ListTimeseriesTableRequest' -> merge_msg_ListTimeseriesTableRequest(Prev, New, TrUserData);
        'ListTimeseriesTableResponse' -> merge_msg_ListTimeseriesTableResponse(Prev, New, TrUserData);
        'DeleteTimeseriesTableRequest' -> merge_msg_DeleteTimeseriesTableRequest(Prev, New, TrUserData);
        'DeleteTimeseriesTableResponse' -> merge_msg_DeleteTimeseriesTableResponse(Prev, New, TrUserData);
        'UpdateTimeseriesTableRequest' -> merge_msg_UpdateTimeseriesTableRequest(Prev, New, TrUserData);
        'UpdateTimeseriesTableResponse' -> merge_msg_UpdateTimeseriesTableResponse(Prev, New, TrUserData);
        'DescribeTimeseriesTableRequest' -> merge_msg_DescribeTimeseriesTableRequest(Prev, New, TrUserData);
        'DescribeTimeseriesTableResponse' -> merge_msg_DescribeTimeseriesTableResponse(Prev, New, TrUserData);
        'MetaQueryCondition' -> merge_msg_MetaQueryCondition(Prev, New, TrUserData);
        'MetaQueryCompositeCondition' -> merge_msg_MetaQueryCompositeCondition(Prev, New, TrUserData);
        'MetaQueryMeasurementCondition' -> merge_msg_MetaQueryMeasurementCondition(Prev, New, TrUserData);
        'MetaQuerySourceCondition' -> merge_msg_MetaQuerySourceCondition(Prev, New, TrUserData);
        'MetaQueryTagCondition' -> merge_msg_MetaQueryTagCondition(Prev, New, TrUserData);
        'MetaQueryAttributeCondition' -> merge_msg_MetaQueryAttributeCondition(Prev, New, TrUserData);
        'MetaQueryUpdateTimeCondition' -> merge_msg_MetaQueryUpdateTimeCondition(Prev, New, TrUserData);
        'TimeseriesKey' -> merge_msg_TimeseriesKey(Prev, New, TrUserData);
        'TimeseriesMeta' -> merge_msg_TimeseriesMeta(Prev, New, TrUserData);
        'QueryTimeseriesMetaRequest' -> merge_msg_QueryTimeseriesMetaRequest(Prev, New, TrUserData);
        'QueryTimeseriesMetaResponse' -> merge_msg_QueryTimeseriesMetaResponse(Prev, New, TrUserData);
        'TimeseriesRows' -> merge_msg_TimeseriesRows(Prev, New, TrUserData);
        'PutTimeseriesDataRequest' -> merge_msg_PutTimeseriesDataRequest(Prev, New, TrUserData);
        'FailedRowInfo' -> merge_msg_FailedRowInfo(Prev, New, TrUserData);
        'MetaUpdateStatus' -> merge_msg_MetaUpdateStatus(Prev, New, TrUserData);
        'PutTimeseriesDataResponse' -> merge_msg_PutTimeseriesDataResponse(Prev, New, TrUserData);
        'GetTimeseriesDataRequest' -> merge_msg_GetTimeseriesDataRequest(Prev, New, TrUserData);
        'GetTimeseriesDataResponse' -> merge_msg_GetTimeseriesDataResponse(Prev, New, TrUserData);
        'UpdateTimeseriesMetaRequest' -> merge_msg_UpdateTimeseriesMetaRequest(Prev, New, TrUserData);
        'UpdateTimeseriesMetaResponse' -> merge_msg_UpdateTimeseriesMetaResponse(Prev, New, TrUserData);
        'DeleteTimeseriesMetaRequest' -> merge_msg_DeleteTimeseriesMetaRequest(Prev, New, TrUserData);
        'DeleteTimeseriesMetaResponse' -> merge_msg_DeleteTimeseriesMetaResponse(Prev, New, TrUserData);
        'TimeseriesField' -> merge_msg_TimeseriesField(Prev, New, TrUserData);
        'TimeseriesRow' -> merge_msg_TimeseriesRow(Prev, New, TrUserData);
        'TimeseriesPBRows' -> merge_msg_TimeseriesPBRows(Prev, New, TrUserData);
        'ErrorResponse' -> merge_msg_ErrorResponse(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_TimeseriesTableOptions/3}).
merge_msg_TimeseriesTableOptions(#'TimeseriesTableOptions'{time_to_live = PFtime_to_live}, #'TimeseriesTableOptions'{time_to_live = NFtime_to_live}, _) ->
    #'TimeseriesTableOptions'{time_to_live =
                                  if NFtime_to_live =:= undefined -> PFtime_to_live;
                                     true -> NFtime_to_live
                                  end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesTableMeta/3}).
merge_msg_TimeseriesTableMeta(#'TimeseriesTableMeta'{table_options = PFtable_options, status = PFstatus}, #'TimeseriesTableMeta'{table_name = NFtable_name, table_options = NFtable_options, status = NFstatus}, TrUserData) ->
    #'TimeseriesTableMeta'{table_name = NFtable_name,
                           table_options =
                               if PFtable_options /= undefined, NFtable_options /= undefined -> merge_msg_TimeseriesTableOptions(PFtable_options, NFtable_options, TrUserData);
                                  PFtable_options == undefined -> NFtable_options;
                                  NFtable_options == undefined -> PFtable_options
                               end,
                           status =
                               if NFstatus =:= undefined -> PFstatus;
                                  true -> NFstatus
                               end}.

-compile({nowarn_unused_function,merge_msg_CreateTimeseriesTableRequest/3}).
merge_msg_CreateTimeseriesTableRequest(#'CreateTimeseriesTableRequest'{table_meta = PFtable_meta}, #'CreateTimeseriesTableRequest'{table_meta = NFtable_meta}, TrUserData) ->
    #'CreateTimeseriesTableRequest'{table_meta = merge_msg_TimeseriesTableMeta(PFtable_meta, NFtable_meta, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_CreateTimeseriesTableResponse/3}).
merge_msg_CreateTimeseriesTableResponse(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ListTimeseriesTableRequest/3}).
merge_msg_ListTimeseriesTableRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ListTimeseriesTableResponse/3}).
merge_msg_ListTimeseriesTableResponse(#'ListTimeseriesTableResponse'{table_metas = PFtable_metas}, #'ListTimeseriesTableResponse'{table_metas = NFtable_metas}, TrUserData) ->
    #'ListTimeseriesTableResponse'{table_metas =
                                       if PFtable_metas /= undefined, NFtable_metas /= undefined -> 'erlang_++'(PFtable_metas, NFtable_metas, TrUserData);
                                          PFtable_metas == undefined -> NFtable_metas;
                                          NFtable_metas == undefined -> PFtable_metas
                                       end}.

-compile({nowarn_unused_function,merge_msg_DeleteTimeseriesTableRequest/3}).
merge_msg_DeleteTimeseriesTableRequest(#'DeleteTimeseriesTableRequest'{}, #'DeleteTimeseriesTableRequest'{table_name = NFtable_name}, _) -> #'DeleteTimeseriesTableRequest'{table_name = NFtable_name}.

-compile({nowarn_unused_function,merge_msg_DeleteTimeseriesTableResponse/3}).
merge_msg_DeleteTimeseriesTableResponse(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_UpdateTimeseriesTableRequest/3}).
merge_msg_UpdateTimeseriesTableRequest(#'UpdateTimeseriesTableRequest'{table_options = PFtable_options}, #'UpdateTimeseriesTableRequest'{table_name = NFtable_name, table_options = NFtable_options}, TrUserData) ->
    #'UpdateTimeseriesTableRequest'{table_name = NFtable_name,
                                    table_options =
                                        if PFtable_options /= undefined, NFtable_options /= undefined -> merge_msg_TimeseriesTableOptions(PFtable_options, NFtable_options, TrUserData);
                                           PFtable_options == undefined -> NFtable_options;
                                           NFtable_options == undefined -> PFtable_options
                                        end}.

-compile({nowarn_unused_function,merge_msg_UpdateTimeseriesTableResponse/3}).
merge_msg_UpdateTimeseriesTableResponse(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_DescribeTimeseriesTableRequest/3}).
merge_msg_DescribeTimeseriesTableRequest(#'DescribeTimeseriesTableRequest'{}, #'DescribeTimeseriesTableRequest'{table_name = NFtable_name}, _) -> #'DescribeTimeseriesTableRequest'{table_name = NFtable_name}.

-compile({nowarn_unused_function,merge_msg_DescribeTimeseriesTableResponse/3}).
merge_msg_DescribeTimeseriesTableResponse(#'DescribeTimeseriesTableResponse'{table_meta = PFtable_meta}, #'DescribeTimeseriesTableResponse'{table_meta = NFtable_meta}, TrUserData) ->
    #'DescribeTimeseriesTableResponse'{table_meta = merge_msg_TimeseriesTableMeta(PFtable_meta, NFtable_meta, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_MetaQueryCondition/3}).
merge_msg_MetaQueryCondition(#'MetaQueryCondition'{}, #'MetaQueryCondition'{type = NFtype, proto_data = NFproto_data}, _) -> #'MetaQueryCondition'{type = NFtype, proto_data = NFproto_data}.

-compile({nowarn_unused_function,merge_msg_MetaQueryCompositeCondition/3}).
merge_msg_MetaQueryCompositeCondition(#'MetaQueryCompositeCondition'{sub_conditions = PFsub_conditions}, #'MetaQueryCompositeCondition'{op = NFop, sub_conditions = NFsub_conditions}, TrUserData) ->
    #'MetaQueryCompositeCondition'{op = NFop,
                                   sub_conditions =
                                       if PFsub_conditions /= undefined, NFsub_conditions /= undefined -> 'erlang_++'(PFsub_conditions, NFsub_conditions, TrUserData);
                                          PFsub_conditions == undefined -> NFsub_conditions;
                                          NFsub_conditions == undefined -> PFsub_conditions
                                       end}.

-compile({nowarn_unused_function,merge_msg_MetaQueryMeasurementCondition/3}).
merge_msg_MetaQueryMeasurementCondition(#'MetaQueryMeasurementCondition'{}, #'MetaQueryMeasurementCondition'{op = NFop, value = NFvalue}, _) -> #'MetaQueryMeasurementCondition'{op = NFop, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_MetaQuerySourceCondition/3}).
merge_msg_MetaQuerySourceCondition(#'MetaQuerySourceCondition'{}, #'MetaQuerySourceCondition'{op = NFop, value = NFvalue}, _) -> #'MetaQuerySourceCondition'{op = NFop, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_MetaQueryTagCondition/3}).
merge_msg_MetaQueryTagCondition(#'MetaQueryTagCondition'{}, #'MetaQueryTagCondition'{op = NFop, tag_name = NFtag_name, value = NFvalue}, _) -> #'MetaQueryTagCondition'{op = NFop, tag_name = NFtag_name, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_MetaQueryAttributeCondition/3}).
merge_msg_MetaQueryAttributeCondition(#'MetaQueryAttributeCondition'{}, #'MetaQueryAttributeCondition'{op = NFop, attr_name = NFattr_name, value = NFvalue}, _) -> #'MetaQueryAttributeCondition'{op = NFop, attr_name = NFattr_name, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_MetaQueryUpdateTimeCondition/3}).
merge_msg_MetaQueryUpdateTimeCondition(#'MetaQueryUpdateTimeCondition'{}, #'MetaQueryUpdateTimeCondition'{op = NFop, value = NFvalue}, _) -> #'MetaQueryUpdateTimeCondition'{op = NFop, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_TimeseriesKey/3}).
merge_msg_TimeseriesKey(#'TimeseriesKey'{}, #'TimeseriesKey'{measurement = NFmeasurement, source = NFsource, tags = NFtags}, _) -> #'TimeseriesKey'{measurement = NFmeasurement, source = NFsource, tags = NFtags}.

-compile({nowarn_unused_function,merge_msg_TimeseriesMeta/3}).
merge_msg_TimeseriesMeta(#'TimeseriesMeta'{time_series_key = PFtime_series_key, attributes = PFattributes, update_time = PFupdate_time}, #'TimeseriesMeta'{time_series_key = NFtime_series_key, attributes = NFattributes, update_time = NFupdate_time},
                         TrUserData) ->
    #'TimeseriesMeta'{time_series_key = merge_msg_TimeseriesKey(PFtime_series_key, NFtime_series_key, TrUserData),
                      attributes =
                          if NFattributes =:= undefined -> PFattributes;
                             true -> NFattributes
                          end,
                      update_time =
                          if NFupdate_time =:= undefined -> PFupdate_time;
                             true -> NFupdate_time
                          end}.

-compile({nowarn_unused_function,merge_msg_QueryTimeseriesMetaRequest/3}).
merge_msg_QueryTimeseriesMetaRequest(#'QueryTimeseriesMetaRequest'{condition = PFcondition, get_total_hit = PFget_total_hit, token = PFtoken, limit = PFlimit},
                                     #'QueryTimeseriesMetaRequest'{table_name = NFtable_name, condition = NFcondition, get_total_hit = NFget_total_hit, token = NFtoken, limit = NFlimit}, TrUserData) ->
    #'QueryTimeseriesMetaRequest'{table_name = NFtable_name,
                                  condition =
                                      if PFcondition /= undefined, NFcondition /= undefined -> merge_msg_MetaQueryCondition(PFcondition, NFcondition, TrUserData);
                                         PFcondition == undefined -> NFcondition;
                                         NFcondition == undefined -> PFcondition
                                      end,
                                  get_total_hit =
                                      if NFget_total_hit =:= undefined -> PFget_total_hit;
                                         true -> NFget_total_hit
                                      end,
                                  token =
                                      if NFtoken =:= undefined -> PFtoken;
                                         true -> NFtoken
                                      end,
                                  limit =
                                      if NFlimit =:= undefined -> PFlimit;
                                         true -> NFlimit
                                      end}.

-compile({nowarn_unused_function,merge_msg_QueryTimeseriesMetaResponse/3}).
merge_msg_QueryTimeseriesMetaResponse(#'QueryTimeseriesMetaResponse'{timeseries_metas = PFtimeseries_metas, total_hit = PFtotal_hit, next_token = PFnext_token},
                                      #'QueryTimeseriesMetaResponse'{timeseries_metas = NFtimeseries_metas, total_hit = NFtotal_hit, next_token = NFnext_token}, TrUserData) ->
    #'QueryTimeseriesMetaResponse'{timeseries_metas =
                                       if PFtimeseries_metas /= undefined, NFtimeseries_metas /= undefined -> 'erlang_++'(PFtimeseries_metas, NFtimeseries_metas, TrUserData);
                                          PFtimeseries_metas == undefined -> NFtimeseries_metas;
                                          NFtimeseries_metas == undefined -> PFtimeseries_metas
                                       end,
                                   total_hit =
                                       if NFtotal_hit =:= undefined -> PFtotal_hit;
                                          true -> NFtotal_hit
                                       end,
                                   next_token =
                                       if NFnext_token =:= undefined -> PFnext_token;
                                          true -> NFnext_token
                                       end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesRows/3}).
merge_msg_TimeseriesRows(#'TimeseriesRows'{flatbuffer_crc32c = PFflatbuffer_crc32c}, #'TimeseriesRows'{type = NFtype, rows_data = NFrows_data, flatbuffer_crc32c = NFflatbuffer_crc32c}, _) ->
    #'TimeseriesRows'{type = NFtype, rows_data = NFrows_data,
                      flatbuffer_crc32c =
                          if NFflatbuffer_crc32c =:= undefined -> PFflatbuffer_crc32c;
                             true -> NFflatbuffer_crc32c
                          end}.

-compile({nowarn_unused_function,merge_msg_PutTimeseriesDataRequest/3}).
merge_msg_PutTimeseriesDataRequest(#'PutTimeseriesDataRequest'{rows_data = PFrows_data, meta_update_mode = PFmeta_update_mode}, #'PutTimeseriesDataRequest'{table_name = NFtable_name, rows_data = NFrows_data, meta_update_mode = NFmeta_update_mode},
                                   TrUserData) ->
    #'PutTimeseriesDataRequest'{table_name = NFtable_name, rows_data = merge_msg_TimeseriesRows(PFrows_data, NFrows_data, TrUserData),
                                meta_update_mode =
                                    if NFmeta_update_mode =:= undefined -> PFmeta_update_mode;
                                       true -> NFmeta_update_mode
                                    end}.

-compile({nowarn_unused_function,merge_msg_FailedRowInfo/3}).
merge_msg_FailedRowInfo(#'FailedRowInfo'{error_code = PFerror_code, error_message = PFerror_message}, #'FailedRowInfo'{row_index = NFrow_index, error_code = NFerror_code, error_message = NFerror_message}, _) ->
    #'FailedRowInfo'{row_index = NFrow_index,
                     error_code =
                         if NFerror_code =:= undefined -> PFerror_code;
                            true -> NFerror_code
                         end,
                     error_message =
                         if NFerror_message =:= undefined -> PFerror_message;
                            true -> NFerror_message
                         end}.

-compile({nowarn_unused_function,merge_msg_MetaUpdateStatus/3}).
merge_msg_MetaUpdateStatus(#'MetaUpdateStatus'{row_ids = PFrow_ids, meta_update_times = PFmeta_update_times}, #'MetaUpdateStatus'{row_ids = NFrow_ids, meta_update_times = NFmeta_update_times}, TrUserData) ->
    #'MetaUpdateStatus'{row_ids =
                            if PFrow_ids /= undefined, NFrow_ids /= undefined -> 'erlang_++'(PFrow_ids, NFrow_ids, TrUserData);
                               PFrow_ids == undefined -> NFrow_ids;
                               NFrow_ids == undefined -> PFrow_ids
                            end,
                        meta_update_times =
                            if PFmeta_update_times /= undefined, NFmeta_update_times /= undefined -> 'erlang_++'(PFmeta_update_times, NFmeta_update_times, TrUserData);
                               PFmeta_update_times == undefined -> NFmeta_update_times;
                               NFmeta_update_times == undefined -> PFmeta_update_times
                            end}.

-compile({nowarn_unused_function,merge_msg_PutTimeseriesDataResponse/3}).
merge_msg_PutTimeseriesDataResponse(#'PutTimeseriesDataResponse'{failed_rows = PFfailed_rows, meta_update_status = PFmeta_update_status}, #'PutTimeseriesDataResponse'{failed_rows = NFfailed_rows, meta_update_status = NFmeta_update_status},
                                    TrUserData) ->
    #'PutTimeseriesDataResponse'{failed_rows =
                                     if PFfailed_rows /= undefined, NFfailed_rows /= undefined -> 'erlang_++'(PFfailed_rows, NFfailed_rows, TrUserData);
                                        PFfailed_rows == undefined -> NFfailed_rows;
                                        NFfailed_rows == undefined -> PFfailed_rows
                                     end,
                                 meta_update_status =
                                     if PFmeta_update_status /= undefined, NFmeta_update_status /= undefined -> merge_msg_MetaUpdateStatus(PFmeta_update_status, NFmeta_update_status, TrUserData);
                                        PFmeta_update_status == undefined -> NFmeta_update_status;
                                        NFmeta_update_status == undefined -> PFmeta_update_status
                                     end}.

-compile({nowarn_unused_function,merge_msg_GetTimeseriesDataRequest/3}).
merge_msg_GetTimeseriesDataRequest(#'GetTimeseriesDataRequest'{time_series_key = PFtime_series_key, begin_time = PFbegin_time, end_time = PFend_time, specific_time = PFspecific_time, token = PFtoken, limit = PFlimit},
                                   #'GetTimeseriesDataRequest'{table_name = NFtable_name, time_series_key = NFtime_series_key, begin_time = NFbegin_time, end_time = NFend_time, specific_time = NFspecific_time, token = NFtoken, limit = NFlimit}, TrUserData) ->
    #'GetTimeseriesDataRequest'{table_name = NFtable_name, time_series_key = merge_msg_TimeseriesKey(PFtime_series_key, NFtime_series_key, TrUserData),
                                begin_time =
                                    if NFbegin_time =:= undefined -> PFbegin_time;
                                       true -> NFbegin_time
                                    end,
                                end_time =
                                    if NFend_time =:= undefined -> PFend_time;
                                       true -> NFend_time
                                    end,
                                specific_time =
                                    if NFspecific_time =:= undefined -> PFspecific_time;
                                       true -> NFspecific_time
                                    end,
                                token =
                                    if NFtoken =:= undefined -> PFtoken;
                                       true -> NFtoken
                                    end,
                                limit =
                                    if NFlimit =:= undefined -> PFlimit;
                                       true -> NFlimit
                                    end}.

-compile({nowarn_unused_function,merge_msg_GetTimeseriesDataResponse/3}).
merge_msg_GetTimeseriesDataResponse(#'GetTimeseriesDataResponse'{next_token = PFnext_token}, #'GetTimeseriesDataResponse'{rows_data = NFrows_data, next_token = NFnext_token}, _) ->
    #'GetTimeseriesDataResponse'{rows_data = NFrows_data,
                                 next_token =
                                     if NFnext_token =:= undefined -> PFnext_token;
                                        true -> NFnext_token
                                     end}.

-compile({nowarn_unused_function,merge_msg_UpdateTimeseriesMetaRequest/3}).
merge_msg_UpdateTimeseriesMetaRequest(#'UpdateTimeseriesMetaRequest'{timeseries_meta = PFtimeseries_meta}, #'UpdateTimeseriesMetaRequest'{table_name = NFtable_name, timeseries_meta = NFtimeseries_meta}, TrUserData) ->
    #'UpdateTimeseriesMetaRequest'{table_name = NFtable_name,
                                   timeseries_meta =
                                       if PFtimeseries_meta /= undefined, NFtimeseries_meta /= undefined -> 'erlang_++'(PFtimeseries_meta, NFtimeseries_meta, TrUserData);
                                          PFtimeseries_meta == undefined -> NFtimeseries_meta;
                                          NFtimeseries_meta == undefined -> PFtimeseries_meta
                                       end}.

-compile({nowarn_unused_function,merge_msg_UpdateTimeseriesMetaResponse/3}).
merge_msg_UpdateTimeseriesMetaResponse(#'UpdateTimeseriesMetaResponse'{failed_rows = PFfailed_rows}, #'UpdateTimeseriesMetaResponse'{failed_rows = NFfailed_rows}, TrUserData) ->
    #'UpdateTimeseriesMetaResponse'{failed_rows =
                                        if PFfailed_rows /= undefined, NFfailed_rows /= undefined -> 'erlang_++'(PFfailed_rows, NFfailed_rows, TrUserData);
                                           PFfailed_rows == undefined -> NFfailed_rows;
                                           NFfailed_rows == undefined -> PFfailed_rows
                                        end}.

-compile({nowarn_unused_function,merge_msg_DeleteTimeseriesMetaRequest/3}).
merge_msg_DeleteTimeseriesMetaRequest(#'DeleteTimeseriesMetaRequest'{timeseries_key = PFtimeseries_key}, #'DeleteTimeseriesMetaRequest'{table_name = NFtable_name, timeseries_key = NFtimeseries_key}, TrUserData) ->
    #'DeleteTimeseriesMetaRequest'{table_name = NFtable_name,
                                   timeseries_key =
                                       if PFtimeseries_key /= undefined, NFtimeseries_key /= undefined -> 'erlang_++'(PFtimeseries_key, NFtimeseries_key, TrUserData);
                                          PFtimeseries_key == undefined -> NFtimeseries_key;
                                          NFtimeseries_key == undefined -> PFtimeseries_key
                                       end}.

-compile({nowarn_unused_function,merge_msg_DeleteTimeseriesMetaResponse/3}).
merge_msg_DeleteTimeseriesMetaResponse(#'DeleteTimeseriesMetaResponse'{failed_rows = PFfailed_rows}, #'DeleteTimeseriesMetaResponse'{failed_rows = NFfailed_rows}, TrUserData) ->
    #'DeleteTimeseriesMetaResponse'{failed_rows =
                                        if PFfailed_rows /= undefined, NFfailed_rows /= undefined -> 'erlang_++'(PFfailed_rows, NFfailed_rows, TrUserData);
                                           PFfailed_rows == undefined -> NFfailed_rows;
                                           NFfailed_rows == undefined -> PFfailed_rows
                                        end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesField/3}).
merge_msg_TimeseriesField(#'TimeseriesField'{field_name = PFfield_name, value_int = PFvalue_int, value_string = PFvalue_string, value_bool = PFvalue_bool, value_double = PFvalue_double, value_binary = PFvalue_binary},
                          #'TimeseriesField'{field_name = NFfield_name, value_int = NFvalue_int, value_string = NFvalue_string, value_bool = NFvalue_bool, value_double = NFvalue_double, value_binary = NFvalue_binary}, _) ->
    #'TimeseriesField'{field_name =
                           if NFfield_name =:= undefined -> PFfield_name;
                              true -> NFfield_name
                           end,
                       value_int =
                           if NFvalue_int =:= undefined -> PFvalue_int;
                              true -> NFvalue_int
                           end,
                       value_string =
                           if NFvalue_string =:= undefined -> PFvalue_string;
                              true -> NFvalue_string
                           end,
                       value_bool =
                           if NFvalue_bool =:= undefined -> PFvalue_bool;
                              true -> NFvalue_bool
                           end,
                       value_double =
                           if NFvalue_double =:= undefined -> PFvalue_double;
                              true -> NFvalue_double
                           end,
                       value_binary =
                           if NFvalue_binary =:= undefined -> PFvalue_binary;
                              true -> NFvalue_binary
                           end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesRow/3}).
merge_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = PFtimeseries_key, time = PFtime, fields = PFfields, meta_cache_update_time = PFmeta_cache_update_time},
                        #'TimeseriesRow'{timeseries_key = NFtimeseries_key, time = NFtime, fields = NFfields, meta_cache_update_time = NFmeta_cache_update_time}, TrUserData) ->
    #'TimeseriesRow'{timeseries_key =
                         if PFtimeseries_key /= undefined, NFtimeseries_key /= undefined -> merge_msg_TimeseriesKey(PFtimeseries_key, NFtimeseries_key, TrUserData);
                            PFtimeseries_key == undefined -> NFtimeseries_key;
                            NFtimeseries_key == undefined -> PFtimeseries_key
                         end,
                     time =
                         if NFtime =:= undefined -> PFtime;
                            true -> NFtime
                         end,
                     fields =
                         if PFfields /= undefined, NFfields /= undefined -> 'erlang_++'(PFfields, NFfields, TrUserData);
                            PFfields == undefined -> NFfields;
                            NFfields == undefined -> PFfields
                         end,
                     meta_cache_update_time =
                         if NFmeta_cache_update_time =:= undefined -> PFmeta_cache_update_time;
                            true -> NFmeta_cache_update_time
                         end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesPBRows/3}).
merge_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = PFrows}, #'TimeseriesPBRows'{rows = NFrows}, TrUserData) ->
    #'TimeseriesPBRows'{rows =
                            if PFrows /= undefined, NFrows /= undefined -> 'erlang_++'(PFrows, NFrows, TrUserData);
                               PFrows == undefined -> NFrows;
                               NFrows == undefined -> PFrows
                            end}.

-compile({nowarn_unused_function,merge_msg_ErrorResponse/3}).
merge_msg_ErrorResponse(#'ErrorResponse'{message = PFmessage}, #'ErrorResponse'{code = NFcode, message = NFmessage}, _) ->
    #'ErrorResponse'{code = NFcode,
                     message =
                         if NFmessage =:= undefined -> PFmessage;
                            true -> NFmessage
                         end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesTableOptions' -> v_msg_TimeseriesTableOptions(Msg, [MsgName], TrUserData);
        'TimeseriesTableMeta' -> v_msg_TimeseriesTableMeta(Msg, [MsgName], TrUserData);
        'CreateTimeseriesTableRequest' -> v_msg_CreateTimeseriesTableRequest(Msg, [MsgName], TrUserData);
        'CreateTimeseriesTableResponse' -> v_msg_CreateTimeseriesTableResponse(Msg, [MsgName], TrUserData);
        'ListTimeseriesTableRequest' -> v_msg_ListTimeseriesTableRequest(Msg, [MsgName], TrUserData);
        'ListTimeseriesTableResponse' -> v_msg_ListTimeseriesTableResponse(Msg, [MsgName], TrUserData);
        'DeleteTimeseriesTableRequest' -> v_msg_DeleteTimeseriesTableRequest(Msg, [MsgName], TrUserData);
        'DeleteTimeseriesTableResponse' -> v_msg_DeleteTimeseriesTableResponse(Msg, [MsgName], TrUserData);
        'UpdateTimeseriesTableRequest' -> v_msg_UpdateTimeseriesTableRequest(Msg, [MsgName], TrUserData);
        'UpdateTimeseriesTableResponse' -> v_msg_UpdateTimeseriesTableResponse(Msg, [MsgName], TrUserData);
        'DescribeTimeseriesTableRequest' -> v_msg_DescribeTimeseriesTableRequest(Msg, [MsgName], TrUserData);
        'DescribeTimeseriesTableResponse' -> v_msg_DescribeTimeseriesTableResponse(Msg, [MsgName], TrUserData);
        'MetaQueryCondition' -> v_msg_MetaQueryCondition(Msg, [MsgName], TrUserData);
        'MetaQueryCompositeCondition' -> v_msg_MetaQueryCompositeCondition(Msg, [MsgName], TrUserData);
        'MetaQueryMeasurementCondition' -> v_msg_MetaQueryMeasurementCondition(Msg, [MsgName], TrUserData);
        'MetaQuerySourceCondition' -> v_msg_MetaQuerySourceCondition(Msg, [MsgName], TrUserData);
        'MetaQueryTagCondition' -> v_msg_MetaQueryTagCondition(Msg, [MsgName], TrUserData);
        'MetaQueryAttributeCondition' -> v_msg_MetaQueryAttributeCondition(Msg, [MsgName], TrUserData);
        'MetaQueryUpdateTimeCondition' -> v_msg_MetaQueryUpdateTimeCondition(Msg, [MsgName], TrUserData);
        'TimeseriesKey' -> v_msg_TimeseriesKey(Msg, [MsgName], TrUserData);
        'TimeseriesMeta' -> v_msg_TimeseriesMeta(Msg, [MsgName], TrUserData);
        'QueryTimeseriesMetaRequest' -> v_msg_QueryTimeseriesMetaRequest(Msg, [MsgName], TrUserData);
        'QueryTimeseriesMetaResponse' -> v_msg_QueryTimeseriesMetaResponse(Msg, [MsgName], TrUserData);
        'TimeseriesRows' -> v_msg_TimeseriesRows(Msg, [MsgName], TrUserData);
        'PutTimeseriesDataRequest' -> v_msg_PutTimeseriesDataRequest(Msg, [MsgName], TrUserData);
        'FailedRowInfo' -> v_msg_FailedRowInfo(Msg, [MsgName], TrUserData);
        'MetaUpdateStatus' -> v_msg_MetaUpdateStatus(Msg, [MsgName], TrUserData);
        'PutTimeseriesDataResponse' -> v_msg_PutTimeseriesDataResponse(Msg, [MsgName], TrUserData);
        'GetTimeseriesDataRequest' -> v_msg_GetTimeseriesDataRequest(Msg, [MsgName], TrUserData);
        'GetTimeseriesDataResponse' -> v_msg_GetTimeseriesDataResponse(Msg, [MsgName], TrUserData);
        'UpdateTimeseriesMetaRequest' -> v_msg_UpdateTimeseriesMetaRequest(Msg, [MsgName], TrUserData);
        'UpdateTimeseriesMetaResponse' -> v_msg_UpdateTimeseriesMetaResponse(Msg, [MsgName], TrUserData);
        'DeleteTimeseriesMetaRequest' -> v_msg_DeleteTimeseriesMetaRequest(Msg, [MsgName], TrUserData);
        'DeleteTimeseriesMetaResponse' -> v_msg_DeleteTimeseriesMetaResponse(Msg, [MsgName], TrUserData);
        'TimeseriesField' -> v_msg_TimeseriesField(Msg, [MsgName], TrUserData);
        'TimeseriesRow' -> v_msg_TimeseriesRow(Msg, [MsgName], TrUserData);
        'TimeseriesPBRows' -> v_msg_TimeseriesPBRows(Msg, [MsgName], TrUserData);
        'ErrorResponse' -> v_msg_ErrorResponse(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_TimeseriesTableOptions/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesTableOptions/3}).
v_msg_TimeseriesTableOptions(#'TimeseriesTableOptions'{time_to_live = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [time_to_live | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesTableOptions(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesTableOptions'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesTableMeta/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesTableMeta/3}).
v_msg_TimeseriesTableMeta(#'TimeseriesTableMeta'{table_name = F1, table_options = F2, status = F3}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_TimeseriesTableOptions(F2, [table_options | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [status | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesTableMeta(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesTableMeta'}, X, Path).

-compile({nowarn_unused_function,v_msg_CreateTimeseriesTableRequest/3}).
-dialyzer({nowarn_function,v_msg_CreateTimeseriesTableRequest/3}).
v_msg_CreateTimeseriesTableRequest(#'CreateTimeseriesTableRequest'{table_meta = F1}, Path, TrUserData) ->
    v_msg_TimeseriesTableMeta(F1, [table_meta | Path], TrUserData),
    ok;
v_msg_CreateTimeseriesTableRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CreateTimeseriesTableRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_CreateTimeseriesTableResponse/3}).
-dialyzer({nowarn_function,v_msg_CreateTimeseriesTableResponse/3}).
v_msg_CreateTimeseriesTableResponse(#'CreateTimeseriesTableResponse'{}, _Path, _) -> ok;
v_msg_CreateTimeseriesTableResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CreateTimeseriesTableResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_ListTimeseriesTableRequest/3}).
-dialyzer({nowarn_function,v_msg_ListTimeseriesTableRequest/3}).
v_msg_ListTimeseriesTableRequest(#'ListTimeseriesTableRequest'{}, _Path, _) -> ok;
v_msg_ListTimeseriesTableRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ListTimeseriesTableRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ListTimeseriesTableResponse/3}).
-dialyzer({nowarn_function,v_msg_ListTimeseriesTableResponse/3}).
v_msg_ListTimeseriesTableResponse(#'ListTimeseriesTableResponse'{table_metas = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeseriesTableMeta(Elem, [table_metas | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesTableMeta'}}, F1, [table_metas | Path])
    end,
    ok;
v_msg_ListTimeseriesTableResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ListTimeseriesTableResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteTimeseriesTableRequest/3}).
-dialyzer({nowarn_function,v_msg_DeleteTimeseriesTableRequest/3}).
v_msg_DeleteTimeseriesTableRequest(#'DeleteTimeseriesTableRequest'{table_name = F1}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    ok;
v_msg_DeleteTimeseriesTableRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DeleteTimeseriesTableRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteTimeseriesTableResponse/3}).
-dialyzer({nowarn_function,v_msg_DeleteTimeseriesTableResponse/3}).
v_msg_DeleteTimeseriesTableResponse(#'DeleteTimeseriesTableResponse'{}, _Path, _) -> ok;
v_msg_DeleteTimeseriesTableResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DeleteTimeseriesTableResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_UpdateTimeseriesTableRequest/3}).
-dialyzer({nowarn_function,v_msg_UpdateTimeseriesTableRequest/3}).
v_msg_UpdateTimeseriesTableRequest(#'UpdateTimeseriesTableRequest'{table_name = F1, table_options = F2}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_TimeseriesTableOptions(F2, [table_options | Path], TrUserData)
    end,
    ok;
v_msg_UpdateTimeseriesTableRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UpdateTimeseriesTableRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_UpdateTimeseriesTableResponse/3}).
-dialyzer({nowarn_function,v_msg_UpdateTimeseriesTableResponse/3}).
v_msg_UpdateTimeseriesTableResponse(#'UpdateTimeseriesTableResponse'{}, _Path, _) -> ok;
v_msg_UpdateTimeseriesTableResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UpdateTimeseriesTableResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_DescribeTimeseriesTableRequest/3}).
-dialyzer({nowarn_function,v_msg_DescribeTimeseriesTableRequest/3}).
v_msg_DescribeTimeseriesTableRequest(#'DescribeTimeseriesTableRequest'{table_name = F1}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    ok;
v_msg_DescribeTimeseriesTableRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DescribeTimeseriesTableRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_DescribeTimeseriesTableResponse/3}).
-dialyzer({nowarn_function,v_msg_DescribeTimeseriesTableResponse/3}).
v_msg_DescribeTimeseriesTableResponse(#'DescribeTimeseriesTableResponse'{table_meta = F1}, Path, TrUserData) ->
    v_msg_TimeseriesTableMeta(F1, [table_meta | Path], TrUserData),
    ok;
v_msg_DescribeTimeseriesTableResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DescribeTimeseriesTableResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryCondition/3}).
v_msg_MetaQueryCondition(#'MetaQueryCondition'{type = F1, proto_data = F2}, Path, TrUserData) ->
    v_enum_MetaQueryConditionType(F1, [type | Path], TrUserData),
    v_type_bytes(F2, [proto_data | Path], TrUserData),
    ok;
v_msg_MetaQueryCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryCompositeCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryCompositeCondition/3}).
v_msg_MetaQueryCompositeCondition(#'MetaQueryCompositeCondition'{op = F1, sub_conditions = F2}, Path, TrUserData) ->
    v_enum_MetaQueryCompositeOperator(F1, [op | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_MetaQueryCondition(Elem, [sub_conditions | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'MetaQueryCondition'}}, F2, [sub_conditions | Path])
    end,
    ok;
v_msg_MetaQueryCompositeCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryCompositeCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryMeasurementCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryMeasurementCondition/3}).
v_msg_MetaQueryMeasurementCondition(#'MetaQueryMeasurementCondition'{op = F1, value = F2}, Path, TrUserData) ->
    v_enum_MetaQuerySingleOperator(F1, [op | Path], TrUserData),
    v_type_string(F2, [value | Path], TrUserData),
    ok;
v_msg_MetaQueryMeasurementCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryMeasurementCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQuerySourceCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQuerySourceCondition/3}).
v_msg_MetaQuerySourceCondition(#'MetaQuerySourceCondition'{op = F1, value = F2}, Path, TrUserData) ->
    v_enum_MetaQuerySingleOperator(F1, [op | Path], TrUserData),
    v_type_string(F2, [value | Path], TrUserData),
    ok;
v_msg_MetaQuerySourceCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQuerySourceCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryTagCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryTagCondition/3}).
v_msg_MetaQueryTagCondition(#'MetaQueryTagCondition'{op = F1, tag_name = F2, value = F3}, Path, TrUserData) ->
    v_enum_MetaQuerySingleOperator(F1, [op | Path], TrUserData),
    v_type_string(F2, [tag_name | Path], TrUserData),
    v_type_string(F3, [value | Path], TrUserData),
    ok;
v_msg_MetaQueryTagCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryTagCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryAttributeCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryAttributeCondition/3}).
v_msg_MetaQueryAttributeCondition(#'MetaQueryAttributeCondition'{op = F1, attr_name = F2, value = F3}, Path, TrUserData) ->
    v_enum_MetaQuerySingleOperator(F1, [op | Path], TrUserData),
    v_type_string(F2, [attr_name | Path], TrUserData),
    v_type_string(F3, [value | Path], TrUserData),
    ok;
v_msg_MetaQueryAttributeCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryAttributeCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaQueryUpdateTimeCondition/3}).
-dialyzer({nowarn_function,v_msg_MetaQueryUpdateTimeCondition/3}).
v_msg_MetaQueryUpdateTimeCondition(#'MetaQueryUpdateTimeCondition'{op = F1, value = F2}, Path, TrUserData) ->
    v_enum_MetaQuerySingleOperator(F1, [op | Path], TrUserData),
    v_type_int64(F2, [value | Path], TrUserData),
    ok;
v_msg_MetaQueryUpdateTimeCondition(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaQueryUpdateTimeCondition'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesKey/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesKey/3}).
v_msg_TimeseriesKey(#'TimeseriesKey'{measurement = F1, source = F2, tags = F3}, Path, TrUserData) ->
    v_type_string(F1, [measurement | Path], TrUserData),
    v_type_string(F2, [source | Path], TrUserData),
    v_type_string(F3, [tags | Path], TrUserData),
    ok;
v_msg_TimeseriesKey(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesKey'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesMeta/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesMeta/3}).
v_msg_TimeseriesMeta(#'TimeseriesMeta'{time_series_key = F1, attributes = F2, update_time = F3}, Path, TrUserData) ->
    v_msg_TimeseriesKey(F1, [time_series_key | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [attributes | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [update_time | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesMeta(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesMeta'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryTimeseriesMetaRequest/3}).
-dialyzer({nowarn_function,v_msg_QueryTimeseriesMetaRequest/3}).
v_msg_QueryTimeseriesMetaRequest(#'QueryTimeseriesMetaRequest'{table_name = F1, condition = F2, get_total_hit = F3, token = F4, limit = F5}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_MetaQueryCondition(F2, [condition | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [get_total_hit | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [token | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [limit | Path], TrUserData)
    end,
    ok;
v_msg_QueryTimeseriesMetaRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryTimeseriesMetaRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryTimeseriesMetaResponse/3}).
-dialyzer({nowarn_function,v_msg_QueryTimeseriesMetaResponse/3}).
v_msg_QueryTimeseriesMetaResponse(#'QueryTimeseriesMetaResponse'{timeseries_metas = F1, total_hit = F2, next_token = F3}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeseriesMeta(Elem, [timeseries_metas | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesMeta'}}, F1, [timeseries_metas | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [total_hit | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [next_token | Path], TrUserData)
    end,
    ok;
v_msg_QueryTimeseriesMetaResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryTimeseriesMetaResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesRows/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesRows/3}).
v_msg_TimeseriesRows(#'TimeseriesRows'{type = F1, rows_data = F2, flatbuffer_crc32c = F3}, Path, TrUserData) ->
    v_enum_RowsSerializeType(F1, [type | Path], TrUserData),
    v_type_bytes(F2, [rows_data | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [flatbuffer_crc32c | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesRows(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesRows'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutTimeseriesDataRequest/3}).
-dialyzer({nowarn_function,v_msg_PutTimeseriesDataRequest/3}).
v_msg_PutTimeseriesDataRequest(#'PutTimeseriesDataRequest'{table_name = F1, rows_data = F2, meta_update_mode = F3}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    v_msg_TimeseriesRows(F2, [rows_data | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_enum_MetaUpdateMode(F3, [meta_update_mode | Path], TrUserData)
    end,
    ok;
v_msg_PutTimeseriesDataRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutTimeseriesDataRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_FailedRowInfo/3}).
-dialyzer({nowarn_function,v_msg_FailedRowInfo/3}).
v_msg_FailedRowInfo(#'FailedRowInfo'{row_index = F1, error_code = F2, error_message = F3}, Path, TrUserData) ->
    v_type_int32(F1, [row_index | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error_code | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [error_message | Path], TrUserData)
    end,
    ok;
v_msg_FailedRowInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'FailedRowInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_MetaUpdateStatus/3}).
-dialyzer({nowarn_function,v_msg_MetaUpdateStatus/3}).
v_msg_MetaUpdateStatus(#'MetaUpdateStatus'{row_ids = F1, meta_update_times = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_uint32(Elem, [row_ids | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F1, [row_ids | Path])
    end,
    if is_list(F2) ->
           _ = [v_type_uint32(Elem, [meta_update_times | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F2, [meta_update_times | Path])
    end,
    ok;
v_msg_MetaUpdateStatus(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MetaUpdateStatus'}, X, Path).

-compile({nowarn_unused_function,v_msg_PutTimeseriesDataResponse/3}).
-dialyzer({nowarn_function,v_msg_PutTimeseriesDataResponse/3}).
v_msg_PutTimeseriesDataResponse(#'PutTimeseriesDataResponse'{failed_rows = F1, meta_update_status = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_FailedRowInfo(Elem, [failed_rows | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'FailedRowInfo'}}, F1, [failed_rows | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_MetaUpdateStatus(F2, [meta_update_status | Path], TrUserData)
    end,
    ok;
v_msg_PutTimeseriesDataResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PutTimeseriesDataResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_GetTimeseriesDataRequest/3}).
-dialyzer({nowarn_function,v_msg_GetTimeseriesDataRequest/3}).
v_msg_GetTimeseriesDataRequest(#'GetTimeseriesDataRequest'{table_name = F1, time_series_key = F2, begin_time = F3, end_time = F4, specific_time = F5, token = F6, limit = F7}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    v_msg_TimeseriesKey(F2, [time_series_key | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [begin_time | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [end_time | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, [specific_time | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [token | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [limit | Path], TrUserData)
    end,
    ok;
v_msg_GetTimeseriesDataRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GetTimeseriesDataRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_GetTimeseriesDataResponse/3}).
-dialyzer({nowarn_function,v_msg_GetTimeseriesDataResponse/3}).
v_msg_GetTimeseriesDataResponse(#'GetTimeseriesDataResponse'{rows_data = F1, next_token = F2}, Path, TrUserData) ->
    v_type_bytes(F1, [rows_data | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [next_token | Path], TrUserData)
    end,
    ok;
v_msg_GetTimeseriesDataResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GetTimeseriesDataResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_UpdateTimeseriesMetaRequest/3}).
-dialyzer({nowarn_function,v_msg_UpdateTimeseriesMetaRequest/3}).
v_msg_UpdateTimeseriesMetaRequest(#'UpdateTimeseriesMetaRequest'{table_name = F1, timeseries_meta = F2}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_TimeseriesMeta(Elem, [timeseries_meta | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesMeta'}}, F2, [timeseries_meta | Path])
    end,
    ok;
v_msg_UpdateTimeseriesMetaRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UpdateTimeseriesMetaRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_UpdateTimeseriesMetaResponse/3}).
-dialyzer({nowarn_function,v_msg_UpdateTimeseriesMetaResponse/3}).
v_msg_UpdateTimeseriesMetaResponse(#'UpdateTimeseriesMetaResponse'{failed_rows = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_FailedRowInfo(Elem, [failed_rows | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'FailedRowInfo'}}, F1, [failed_rows | Path])
    end,
    ok;
v_msg_UpdateTimeseriesMetaResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UpdateTimeseriesMetaResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteTimeseriesMetaRequest/3}).
-dialyzer({nowarn_function,v_msg_DeleteTimeseriesMetaRequest/3}).
v_msg_DeleteTimeseriesMetaRequest(#'DeleteTimeseriesMetaRequest'{table_name = F1, timeseries_key = F2}, Path, TrUserData) ->
    v_type_string(F1, [table_name | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_msg_TimeseriesKey(Elem, [timeseries_key | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesKey'}}, F2, [timeseries_key | Path])
    end,
    ok;
v_msg_DeleteTimeseriesMetaRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DeleteTimeseriesMetaRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteTimeseriesMetaResponse/3}).
-dialyzer({nowarn_function,v_msg_DeleteTimeseriesMetaResponse/3}).
v_msg_DeleteTimeseriesMetaResponse(#'DeleteTimeseriesMetaResponse'{failed_rows = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_FailedRowInfo(Elem, [failed_rows | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'FailedRowInfo'}}, F1, [failed_rows | Path])
    end,
    ok;
v_msg_DeleteTimeseriesMetaResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DeleteTimeseriesMetaResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesField/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesField/3}).
v_msg_TimeseriesField(#'TimeseriesField'{field_name = F1, value_int = F2, value_string = F3, value_bool = F4, value_double = F5, value_binary = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [field_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [value_int | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [value_string | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [value_bool | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_double(F5, [value_double | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [value_binary | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesField(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesField'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesRow/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesRow/3}).
v_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = F1, time = F2, fields = F3, meta_cache_update_time = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_TimeseriesKey(F1, [timeseries_key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_TimeseriesField(Elem, [fields | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesField'}}, F3, [fields | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [meta_cache_update_time | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesRow(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesRow'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesPBRows/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesPBRows/3}).
v_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeseriesRow(Elem, [rows | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesRow'}}, F1, [rows | Path])
    end,
    ok;
v_msg_TimeseriesPBRows(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesPBRows'}, X, Path).

-compile({nowarn_unused_function,v_msg_ErrorResponse/3}).
-dialyzer({nowarn_function,v_msg_ErrorResponse/3}).
v_msg_ErrorResponse(#'ErrorResponse'{code = F1, message = F2}, Path, TrUserData) ->
    v_type_string(F1, [code | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [message | Path], TrUserData)
    end,
    ok;
v_msg_ErrorResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ErrorResponse'}, X, Path).

-compile({nowarn_unused_function,v_enum_MetaQueryConditionType/3}).
-dialyzer({nowarn_function,v_enum_MetaQueryConditionType/3}).
v_enum_MetaQueryConditionType('COMPOSITE_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType('MEASUREMENT_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType('SOURCE_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType('TAG_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType('UPDATE_TIME_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType('ATTRIBUTE_CONDITION', _Path, _TrUserData) -> ok;
v_enum_MetaQueryConditionType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_MetaQueryConditionType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MetaQueryConditionType'}, X, Path).

-compile({nowarn_unused_function,v_enum_MetaQueryCompositeOperator/3}).
-dialyzer({nowarn_function,v_enum_MetaQueryCompositeOperator/3}).
v_enum_MetaQueryCompositeOperator('OP_AND', _Path, _TrUserData) -> ok;
v_enum_MetaQueryCompositeOperator('OP_OR', _Path, _TrUserData) -> ok;
v_enum_MetaQueryCompositeOperator('OP_NOT', _Path, _TrUserData) -> ok;
v_enum_MetaQueryCompositeOperator(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_MetaQueryCompositeOperator(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MetaQueryCompositeOperator'}, X, Path).

-compile({nowarn_unused_function,v_enum_MetaQuerySingleOperator/3}).
-dialyzer({nowarn_function,v_enum_MetaQuerySingleOperator/3}).
v_enum_MetaQuerySingleOperator('OP_EQUAL', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator('OP_GREATER_THAN', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator('OP_GREATER_EQUAL', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator('OP_LESS_THAN', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator('OP_LESS_EQUAL', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator('OP_PREFIX', _Path, _TrUserData) -> ok;
v_enum_MetaQuerySingleOperator(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_MetaQuerySingleOperator(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MetaQuerySingleOperator'}, X, Path).

-compile({nowarn_unused_function,v_enum_RowsSerializeType/3}).
-dialyzer({nowarn_function,v_enum_RowsSerializeType/3}).
v_enum_RowsSerializeType('RST_FLAT_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType('RST_PLAIN_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType('RST_PROTO_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_RowsSerializeType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RowsSerializeType'}, X, Path).

-compile({nowarn_unused_function,v_enum_MetaUpdateMode/3}).
-dialyzer({nowarn_function,v_enum_MetaUpdateMode/3}).
v_enum_MetaUpdateMode('MUM_NORMAL', _Path, _TrUserData) -> ok;
v_enum_MetaUpdateMode('MUM_IGNORE', _Path, _TrUserData) -> ok;
v_enum_MetaUpdateMode(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_MetaUpdateMode(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MetaUpdateMode'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'MetaQueryConditionType'}, [{'COMPOSITE_CONDITION', 1}, {'MEASUREMENT_CONDITION', 2}, {'SOURCE_CONDITION', 3}, {'TAG_CONDITION', 4}, {'UPDATE_TIME_CONDITION', 5}, {'ATTRIBUTE_CONDITION', 6}]},
     {{enum, 'MetaQueryCompositeOperator'}, [{'OP_AND', 1}, {'OP_OR', 2}, {'OP_NOT', 3}]},
     {{enum, 'MetaQuerySingleOperator'}, [{'OP_EQUAL', 1}, {'OP_GREATER_THAN', 2}, {'OP_GREATER_EQUAL', 3}, {'OP_LESS_THAN', 4}, {'OP_LESS_EQUAL', 5}, {'OP_PREFIX', 6}]},
     {{enum, 'RowsSerializeType'}, [{'RST_FLAT_BUFFER', 0}, {'RST_PLAIN_BUFFER', 1}, {'RST_PROTO_BUFFER', 2}]},
     {{enum, 'MetaUpdateMode'}, [{'MUM_NORMAL', 0}, {'MUM_IGNORE', 1}]},
     {{msg, 'TimeseriesTableOptions'}, [#field{name = time_to_live, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesTableMeta'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = table_options, fnum = 2, rnum = 3, type = {msg, 'TimeseriesTableOptions'}, occurrence = optional, opts = []},
       #field{name = status, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, 'CreateTimeseriesTableRequest'}, [#field{name = table_meta, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = required, opts = []}]},
     {{msg, 'CreateTimeseriesTableResponse'}, []},
     {{msg, 'ListTimeseriesTableRequest'}, []},
     {{msg, 'ListTimeseriesTableResponse'}, [#field{name = table_metas, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = repeated, opts = []}]},
     {{msg, 'DeleteTimeseriesTableRequest'}, [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}]},
     {{msg, 'DeleteTimeseriesTableResponse'}, []},
     {{msg, 'UpdateTimeseriesTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = table_options, fnum = 2, rnum = 3, type = {msg, 'TimeseriesTableOptions'}, occurrence = optional, opts = []}]},
     {{msg, 'UpdateTimeseriesTableResponse'}, []},
     {{msg, 'DescribeTimeseriesTableRequest'}, [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}]},
     {{msg, 'DescribeTimeseriesTableResponse'}, [#field{name = table_meta, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = required, opts = []}]},
     {{msg, 'MetaQueryCondition'}, [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MetaQueryConditionType'}, occurrence = required, opts = []}, #field{name = proto_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []}]},
     {{msg, 'MetaQueryCompositeCondition'},
      [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQueryCompositeOperator'}, occurrence = required, opts = []}, #field{name = sub_conditions, fnum = 2, rnum = 3, type = {msg, 'MetaQueryCondition'}, occurrence = repeated, opts = []}]},
     {{msg, 'MetaQueryMeasurementCondition'}, [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}]},
     {{msg, 'MetaQuerySourceCondition'}, [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}]},
     {{msg, 'MetaQueryTagCondition'},
      [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []},
       #field{name = tag_name, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}]},
     {{msg, 'MetaQueryAttributeCondition'},
      [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []},
       #field{name = attr_name, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}]},
     {{msg, 'MetaQueryUpdateTimeCondition'}, [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = int64, occurrence = required, opts = []}]},
     {{msg, 'TimeseriesKey'},
      [#field{name = measurement, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = source, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
       #field{name = tags, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}]},
     {{msg, 'TimeseriesMeta'},
      [#field{name = time_series_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = required, opts = []},
       #field{name = attributes, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = update_time, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}]},
     {{msg, 'QueryTimeseriesMetaRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = condition, fnum = 2, rnum = 3, type = {msg, 'MetaQueryCondition'}, occurrence = optional, opts = []},
       #field{name = get_total_hit, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
       #field{name = token, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
       #field{name = limit, fnum = 5, rnum = 6, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'QueryTimeseriesMetaResponse'},
      [#field{name = timeseries_metas, fnum = 1, rnum = 2, type = {msg, 'TimeseriesMeta'}, occurrence = repeated, opts = []},
       #field{name = total_hit, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = next_token, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesRows'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RowsSerializeType'}, occurrence = required, opts = []},
       #field{name = rows_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []},
       #field{name = flatbuffer_crc32c, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'PutTimeseriesDataRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = rows_data, fnum = 2, rnum = 3, type = {msg, 'TimeseriesRows'}, occurrence = required, opts = []},
       #field{name = meta_update_mode, fnum = 3, rnum = 4, type = {enum, 'MetaUpdateMode'}, occurrence = optional, opts = []}]},
     {{msg, 'FailedRowInfo'},
      [#field{name = row_index, fnum = 1, rnum = 2, type = int32, occurrence = required, opts = []},
       #field{name = error_code, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = error_message, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, 'MetaUpdateStatus'}, [#field{name = row_ids, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []}, #field{name = meta_update_times, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'PutTimeseriesDataResponse'},
      [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}, #field{name = meta_update_status, fnum = 2, rnum = 3, type = {msg, 'MetaUpdateStatus'}, occurrence = optional, opts = []}]},
     {{msg, 'GetTimeseriesDataRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = time_series_key, fnum = 2, rnum = 3, type = {msg, 'TimeseriesKey'}, occurrence = required, opts = []},
       #field{name = begin_time, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []},
       #field{name = end_time, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
       #field{name = specific_time, fnum = 5, rnum = 6, type = int64, occurrence = optional, opts = []},
       #field{name = token, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []},
       #field{name = limit, fnum = 7, rnum = 8, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'GetTimeseriesDataResponse'}, [#field{name = rows_data, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []}, #field{name = next_token, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'UpdateTimeseriesMetaRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = timeseries_meta, fnum = 2, rnum = 3, type = {msg, 'TimeseriesMeta'}, occurrence = repeated, opts = []}]},
     {{msg, 'UpdateTimeseriesMetaResponse'}, [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}]},
     {{msg, 'DeleteTimeseriesMetaRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = timeseries_key, fnum = 2, rnum = 3, type = {msg, 'TimeseriesKey'}, occurrence = repeated, opts = []}]},
     {{msg, 'DeleteTimeseriesMetaResponse'}, [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}]},
     {{msg, 'TimeseriesField'},
      [#field{name = field_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = value_int, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = value_string, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = value_bool, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
       #field{name = value_double, fnum = 5, rnum = 6, type = double, occurrence = optional, opts = []},
       #field{name = value_binary, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesRow'},
      [#field{name = timeseries_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = fields, fnum = 3, rnum = 4, type = {msg, 'TimeseriesField'}, occurrence = repeated, opts = []},
       #field{name = meta_cache_update_time, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesPBRows'}, [#field{name = rows, fnum = 1, rnum = 2, type = {msg, 'TimeseriesRow'}, occurrence = repeated, opts = []}]},
     {{msg, 'ErrorResponse'}, [#field{name = code, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = message, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['TimeseriesTableOptions',
     'TimeseriesTableMeta',
     'CreateTimeseriesTableRequest',
     'CreateTimeseriesTableResponse',
     'ListTimeseriesTableRequest',
     'ListTimeseriesTableResponse',
     'DeleteTimeseriesTableRequest',
     'DeleteTimeseriesTableResponse',
     'UpdateTimeseriesTableRequest',
     'UpdateTimeseriesTableResponse',
     'DescribeTimeseriesTableRequest',
     'DescribeTimeseriesTableResponse',
     'MetaQueryCondition',
     'MetaQueryCompositeCondition',
     'MetaQueryMeasurementCondition',
     'MetaQuerySourceCondition',
     'MetaQueryTagCondition',
     'MetaQueryAttributeCondition',
     'MetaQueryUpdateTimeCondition',
     'TimeseriesKey',
     'TimeseriesMeta',
     'QueryTimeseriesMetaRequest',
     'QueryTimeseriesMetaResponse',
     'TimeseriesRows',
     'PutTimeseriesDataRequest',
     'FailedRowInfo',
     'MetaUpdateStatus',
     'PutTimeseriesDataResponse',
     'GetTimeseriesDataRequest',
     'GetTimeseriesDataResponse',
     'UpdateTimeseriesMetaRequest',
     'UpdateTimeseriesMetaResponse',
     'DeleteTimeseriesMetaRequest',
     'DeleteTimeseriesMetaResponse',
     'TimeseriesField',
     'TimeseriesRow',
     'TimeseriesPBRows',
     'ErrorResponse'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['TimeseriesTableOptions',
     'TimeseriesTableMeta',
     'CreateTimeseriesTableRequest',
     'CreateTimeseriesTableResponse',
     'ListTimeseriesTableRequest',
     'ListTimeseriesTableResponse',
     'DeleteTimeseriesTableRequest',
     'DeleteTimeseriesTableResponse',
     'UpdateTimeseriesTableRequest',
     'UpdateTimeseriesTableResponse',
     'DescribeTimeseriesTableRequest',
     'DescribeTimeseriesTableResponse',
     'MetaQueryCondition',
     'MetaQueryCompositeCondition',
     'MetaQueryMeasurementCondition',
     'MetaQuerySourceCondition',
     'MetaQueryTagCondition',
     'MetaQueryAttributeCondition',
     'MetaQueryUpdateTimeCondition',
     'TimeseriesKey',
     'TimeseriesMeta',
     'QueryTimeseriesMetaRequest',
     'QueryTimeseriesMetaResponse',
     'TimeseriesRows',
     'PutTimeseriesDataRequest',
     'FailedRowInfo',
     'MetaUpdateStatus',
     'PutTimeseriesDataResponse',
     'GetTimeseriesDataRequest',
     'GetTimeseriesDataResponse',
     'UpdateTimeseriesMetaRequest',
     'UpdateTimeseriesMetaResponse',
     'DeleteTimeseriesMetaRequest',
     'DeleteTimeseriesMetaResponse',
     'TimeseriesField',
     'TimeseriesRow',
     'TimeseriesPBRows',
     'ErrorResponse'].


get_enum_names() -> ['MetaQueryConditionType', 'MetaQueryCompositeOperator', 'MetaQuerySingleOperator', 'RowsSerializeType', 'MetaUpdateMode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('TimeseriesTableOptions') -> [#field{name = time_to_live, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}];
find_msg_def('TimeseriesTableMeta') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = table_options, fnum = 2, rnum = 3, type = {msg, 'TimeseriesTableOptions'}, occurrence = optional, opts = []},
     #field{name = status, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def('CreateTimeseriesTableRequest') -> [#field{name = table_meta, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = required, opts = []}];
find_msg_def('CreateTimeseriesTableResponse') -> [];
find_msg_def('ListTimeseriesTableRequest') -> [];
find_msg_def('ListTimeseriesTableResponse') -> [#field{name = table_metas, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = repeated, opts = []}];
find_msg_def('DeleteTimeseriesTableRequest') -> [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}];
find_msg_def('DeleteTimeseriesTableResponse') -> [];
find_msg_def('UpdateTimeseriesTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = table_options, fnum = 2, rnum = 3, type = {msg, 'TimeseriesTableOptions'}, occurrence = optional, opts = []}];
find_msg_def('UpdateTimeseriesTableResponse') -> [];
find_msg_def('DescribeTimeseriesTableRequest') -> [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}];
find_msg_def('DescribeTimeseriesTableResponse') -> [#field{name = table_meta, fnum = 1, rnum = 2, type = {msg, 'TimeseriesTableMeta'}, occurrence = required, opts = []}];
find_msg_def('MetaQueryCondition') -> [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MetaQueryConditionType'}, occurrence = required, opts = []}, #field{name = proto_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []}];
find_msg_def('MetaQueryCompositeCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQueryCompositeOperator'}, occurrence = required, opts = []}, #field{name = sub_conditions, fnum = 2, rnum = 3, type = {msg, 'MetaQueryCondition'}, occurrence = repeated, opts = []}];
find_msg_def('MetaQueryMeasurementCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}];
find_msg_def('MetaQuerySourceCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}];
find_msg_def('MetaQueryTagCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []},
     #field{name = tag_name, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}];
find_msg_def('MetaQueryAttributeCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []},
     #field{name = attr_name, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}];
find_msg_def('MetaQueryUpdateTimeCondition') ->
    [#field{name = op, fnum = 1, rnum = 2, type = {enum, 'MetaQuerySingleOperator'}, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = int64, occurrence = required, opts = []}];
find_msg_def('TimeseriesKey') ->
    [#field{name = measurement, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = source, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
     #field{name = tags, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}];
find_msg_def('TimeseriesMeta') ->
    [#field{name = time_series_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = required, opts = []},
     #field{name = attributes, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = update_time, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}];
find_msg_def('QueryTimeseriesMetaRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = condition, fnum = 2, rnum = 3, type = {msg, 'MetaQueryCondition'}, occurrence = optional, opts = []},
     #field{name = get_total_hit, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
     #field{name = token, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
     #field{name = limit, fnum = 5, rnum = 6, type = int32, occurrence = optional, opts = []}];
find_msg_def('QueryTimeseriesMetaResponse') ->
    [#field{name = timeseries_metas, fnum = 1, rnum = 2, type = {msg, 'TimeseriesMeta'}, occurrence = repeated, opts = []},
     #field{name = total_hit, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = next_token, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def('TimeseriesRows') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RowsSerializeType'}, occurrence = required, opts = []},
     #field{name = rows_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []},
     #field{name = flatbuffer_crc32c, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}];
find_msg_def('PutTimeseriesDataRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = rows_data, fnum = 2, rnum = 3, type = {msg, 'TimeseriesRows'}, occurrence = required, opts = []},
     #field{name = meta_update_mode, fnum = 3, rnum = 4, type = {enum, 'MetaUpdateMode'}, occurrence = optional, opts = []}];
find_msg_def('FailedRowInfo') ->
    [#field{name = row_index, fnum = 1, rnum = 2, type = int32, occurrence = required, opts = []},
     #field{name = error_code, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = error_message, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def('MetaUpdateStatus') -> [#field{name = row_ids, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []}, #field{name = meta_update_times, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []}];
find_msg_def('PutTimeseriesDataResponse') ->
    [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}, #field{name = meta_update_status, fnum = 2, rnum = 3, type = {msg, 'MetaUpdateStatus'}, occurrence = optional, opts = []}];
find_msg_def('GetTimeseriesDataRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = time_series_key, fnum = 2, rnum = 3, type = {msg, 'TimeseriesKey'}, occurrence = required, opts = []},
     #field{name = begin_time, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []},
     #field{name = end_time, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
     #field{name = specific_time, fnum = 5, rnum = 6, type = int64, occurrence = optional, opts = []},
     #field{name = token, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []},
     #field{name = limit, fnum = 7, rnum = 8, type = int32, occurrence = optional, opts = []}];
find_msg_def('GetTimeseriesDataResponse') -> [#field{name = rows_data, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []}, #field{name = next_token, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def('UpdateTimeseriesMetaRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = timeseries_meta, fnum = 2, rnum = 3, type = {msg, 'TimeseriesMeta'}, occurrence = repeated, opts = []}];
find_msg_def('UpdateTimeseriesMetaResponse') -> [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}];
find_msg_def('DeleteTimeseriesMetaRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = timeseries_key, fnum = 2, rnum = 3, type = {msg, 'TimeseriesKey'}, occurrence = repeated, opts = []}];
find_msg_def('DeleteTimeseriesMetaResponse') -> [#field{name = failed_rows, fnum = 1, rnum = 2, type = {msg, 'FailedRowInfo'}, occurrence = repeated, opts = []}];
find_msg_def('TimeseriesField') ->
    [#field{name = field_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = value_int, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = value_string, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = value_bool, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
     #field{name = value_double, fnum = 5, rnum = 6, type = double, occurrence = optional, opts = []},
     #field{name = value_binary, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}];
find_msg_def('TimeseriesRow') ->
    [#field{name = timeseries_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = fields, fnum = 3, rnum = 4, type = {msg, 'TimeseriesField'}, occurrence = repeated, opts = []},
     #field{name = meta_cache_update_time, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('TimeseriesPBRows') -> [#field{name = rows, fnum = 1, rnum = 2, type = {msg, 'TimeseriesRow'}, occurrence = repeated, opts = []}];
find_msg_def('ErrorResponse') -> [#field{name = code, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = message, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('MetaQueryConditionType') -> [{'COMPOSITE_CONDITION', 1}, {'MEASUREMENT_CONDITION', 2}, {'SOURCE_CONDITION', 3}, {'TAG_CONDITION', 4}, {'UPDATE_TIME_CONDITION', 5}, {'ATTRIBUTE_CONDITION', 6}];
find_enum_def('MetaQueryCompositeOperator') -> [{'OP_AND', 1}, {'OP_OR', 2}, {'OP_NOT', 3}];
find_enum_def('MetaQuerySingleOperator') -> [{'OP_EQUAL', 1}, {'OP_GREATER_THAN', 2}, {'OP_GREATER_EQUAL', 3}, {'OP_LESS_THAN', 4}, {'OP_LESS_EQUAL', 5}, {'OP_PREFIX', 6}];
find_enum_def('RowsSerializeType') -> [{'RST_FLAT_BUFFER', 0}, {'RST_PLAIN_BUFFER', 1}, {'RST_PROTO_BUFFER', 2}];
find_enum_def('MetaUpdateMode') -> [{'MUM_NORMAL', 0}, {'MUM_IGNORE', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('MetaQueryConditionType', Value) -> enum_symbol_by_value_MetaQueryConditionType(Value);
enum_symbol_by_value('MetaQueryCompositeOperator', Value) -> enum_symbol_by_value_MetaQueryCompositeOperator(Value);
enum_symbol_by_value('MetaQuerySingleOperator', Value) -> enum_symbol_by_value_MetaQuerySingleOperator(Value);
enum_symbol_by_value('RowsSerializeType', Value) -> enum_symbol_by_value_RowsSerializeType(Value);
enum_symbol_by_value('MetaUpdateMode', Value) -> enum_symbol_by_value_MetaUpdateMode(Value).


enum_value_by_symbol('MetaQueryConditionType', Sym) -> enum_value_by_symbol_MetaQueryConditionType(Sym);
enum_value_by_symbol('MetaQueryCompositeOperator', Sym) -> enum_value_by_symbol_MetaQueryCompositeOperator(Sym);
enum_value_by_symbol('MetaQuerySingleOperator', Sym) -> enum_value_by_symbol_MetaQuerySingleOperator(Sym);
enum_value_by_symbol('RowsSerializeType', Sym) -> enum_value_by_symbol_RowsSerializeType(Sym);
enum_value_by_symbol('MetaUpdateMode', Sym) -> enum_value_by_symbol_MetaUpdateMode(Sym).


enum_symbol_by_value_MetaQueryConditionType(1) -> 'COMPOSITE_CONDITION';
enum_symbol_by_value_MetaQueryConditionType(2) -> 'MEASUREMENT_CONDITION';
enum_symbol_by_value_MetaQueryConditionType(3) -> 'SOURCE_CONDITION';
enum_symbol_by_value_MetaQueryConditionType(4) -> 'TAG_CONDITION';
enum_symbol_by_value_MetaQueryConditionType(5) -> 'UPDATE_TIME_CONDITION';
enum_symbol_by_value_MetaQueryConditionType(6) -> 'ATTRIBUTE_CONDITION'.


enum_value_by_symbol_MetaQueryConditionType('COMPOSITE_CONDITION') -> 1;
enum_value_by_symbol_MetaQueryConditionType('MEASUREMENT_CONDITION') -> 2;
enum_value_by_symbol_MetaQueryConditionType('SOURCE_CONDITION') -> 3;
enum_value_by_symbol_MetaQueryConditionType('TAG_CONDITION') -> 4;
enum_value_by_symbol_MetaQueryConditionType('UPDATE_TIME_CONDITION') -> 5;
enum_value_by_symbol_MetaQueryConditionType('ATTRIBUTE_CONDITION') -> 6.

enum_symbol_by_value_MetaQueryCompositeOperator(1) -> 'OP_AND';
enum_symbol_by_value_MetaQueryCompositeOperator(2) -> 'OP_OR';
enum_symbol_by_value_MetaQueryCompositeOperator(3) -> 'OP_NOT'.


enum_value_by_symbol_MetaQueryCompositeOperator('OP_AND') -> 1;
enum_value_by_symbol_MetaQueryCompositeOperator('OP_OR') -> 2;
enum_value_by_symbol_MetaQueryCompositeOperator('OP_NOT') -> 3.

enum_symbol_by_value_MetaQuerySingleOperator(1) -> 'OP_EQUAL';
enum_symbol_by_value_MetaQuerySingleOperator(2) -> 'OP_GREATER_THAN';
enum_symbol_by_value_MetaQuerySingleOperator(3) -> 'OP_GREATER_EQUAL';
enum_symbol_by_value_MetaQuerySingleOperator(4) -> 'OP_LESS_THAN';
enum_symbol_by_value_MetaQuerySingleOperator(5) -> 'OP_LESS_EQUAL';
enum_symbol_by_value_MetaQuerySingleOperator(6) -> 'OP_PREFIX'.


enum_value_by_symbol_MetaQuerySingleOperator('OP_EQUAL') -> 1;
enum_value_by_symbol_MetaQuerySingleOperator('OP_GREATER_THAN') -> 2;
enum_value_by_symbol_MetaQuerySingleOperator('OP_GREATER_EQUAL') -> 3;
enum_value_by_symbol_MetaQuerySingleOperator('OP_LESS_THAN') -> 4;
enum_value_by_symbol_MetaQuerySingleOperator('OP_LESS_EQUAL') -> 5;
enum_value_by_symbol_MetaQuerySingleOperator('OP_PREFIX') -> 6.

enum_symbol_by_value_RowsSerializeType(0) -> 'RST_FLAT_BUFFER';
enum_symbol_by_value_RowsSerializeType(1) -> 'RST_PLAIN_BUFFER';
enum_symbol_by_value_RowsSerializeType(2) -> 'RST_PROTO_BUFFER'.


enum_value_by_symbol_RowsSerializeType('RST_FLAT_BUFFER') -> 0;
enum_value_by_symbol_RowsSerializeType('RST_PLAIN_BUFFER') -> 1;
enum_value_by_symbol_RowsSerializeType('RST_PROTO_BUFFER') -> 2.

enum_symbol_by_value_MetaUpdateMode(0) -> 'MUM_NORMAL';
enum_symbol_by_value_MetaUpdateMode(1) -> 'MUM_IGNORE'.


enum_value_by_symbol_MetaUpdateMode('MUM_NORMAL') -> 0;
enum_value_by_symbol_MetaUpdateMode('MUM_IGNORE') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"otsprotocol.TimeseriesTableOptions">>) -> 'TimeseriesTableOptions';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesTableMeta">>) -> 'TimeseriesTableMeta';
fqbin_to_msg_name(<<"otsprotocol.CreateTimeseriesTableRequest">>) -> 'CreateTimeseriesTableRequest';
fqbin_to_msg_name(<<"otsprotocol.CreateTimeseriesTableResponse">>) -> 'CreateTimeseriesTableResponse';
fqbin_to_msg_name(<<"otsprotocol.ListTimeseriesTableRequest">>) -> 'ListTimeseriesTableRequest';
fqbin_to_msg_name(<<"otsprotocol.ListTimeseriesTableResponse">>) -> 'ListTimeseriesTableResponse';
fqbin_to_msg_name(<<"otsprotocol.DeleteTimeseriesTableRequest">>) -> 'DeleteTimeseriesTableRequest';
fqbin_to_msg_name(<<"otsprotocol.DeleteTimeseriesTableResponse">>) -> 'DeleteTimeseriesTableResponse';
fqbin_to_msg_name(<<"otsprotocol.UpdateTimeseriesTableRequest">>) -> 'UpdateTimeseriesTableRequest';
fqbin_to_msg_name(<<"otsprotocol.UpdateTimeseriesTableResponse">>) -> 'UpdateTimeseriesTableResponse';
fqbin_to_msg_name(<<"otsprotocol.DescribeTimeseriesTableRequest">>) -> 'DescribeTimeseriesTableRequest';
fqbin_to_msg_name(<<"otsprotocol.DescribeTimeseriesTableResponse">>) -> 'DescribeTimeseriesTableResponse';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryCondition">>) -> 'MetaQueryCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryCompositeCondition">>) -> 'MetaQueryCompositeCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryMeasurementCondition">>) -> 'MetaQueryMeasurementCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQuerySourceCondition">>) -> 'MetaQuerySourceCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryTagCondition">>) -> 'MetaQueryTagCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryAttributeCondition">>) -> 'MetaQueryAttributeCondition';
fqbin_to_msg_name(<<"otsprotocol.MetaQueryUpdateTimeCondition">>) -> 'MetaQueryUpdateTimeCondition';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesKey">>) -> 'TimeseriesKey';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesMeta">>) -> 'TimeseriesMeta';
fqbin_to_msg_name(<<"otsprotocol.QueryTimeseriesMetaRequest">>) -> 'QueryTimeseriesMetaRequest';
fqbin_to_msg_name(<<"otsprotocol.QueryTimeseriesMetaResponse">>) -> 'QueryTimeseriesMetaResponse';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesRows">>) -> 'TimeseriesRows';
fqbin_to_msg_name(<<"otsprotocol.PutTimeseriesDataRequest">>) -> 'PutTimeseriesDataRequest';
fqbin_to_msg_name(<<"otsprotocol.FailedRowInfo">>) -> 'FailedRowInfo';
fqbin_to_msg_name(<<"otsprotocol.MetaUpdateStatus">>) -> 'MetaUpdateStatus';
fqbin_to_msg_name(<<"otsprotocol.PutTimeseriesDataResponse">>) -> 'PutTimeseriesDataResponse';
fqbin_to_msg_name(<<"otsprotocol.GetTimeseriesDataRequest">>) -> 'GetTimeseriesDataRequest';
fqbin_to_msg_name(<<"otsprotocol.GetTimeseriesDataResponse">>) -> 'GetTimeseriesDataResponse';
fqbin_to_msg_name(<<"otsprotocol.UpdateTimeseriesMetaRequest">>) -> 'UpdateTimeseriesMetaRequest';
fqbin_to_msg_name(<<"otsprotocol.UpdateTimeseriesMetaResponse">>) -> 'UpdateTimeseriesMetaResponse';
fqbin_to_msg_name(<<"otsprotocol.DeleteTimeseriesMetaRequest">>) -> 'DeleteTimeseriesMetaRequest';
fqbin_to_msg_name(<<"otsprotocol.DeleteTimeseriesMetaResponse">>) -> 'DeleteTimeseriesMetaResponse';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesField">>) -> 'TimeseriesField';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesRow">>) -> 'TimeseriesRow';
fqbin_to_msg_name(<<"otsprotocol.TimeseriesPBRows">>) -> 'TimeseriesPBRows';
fqbin_to_msg_name(<<"otsprotocol.ErrorResponse">>) -> 'ErrorResponse';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('TimeseriesTableOptions') -> <<"otsprotocol.TimeseriesTableOptions">>;
msg_name_to_fqbin('TimeseriesTableMeta') -> <<"otsprotocol.TimeseriesTableMeta">>;
msg_name_to_fqbin('CreateTimeseriesTableRequest') -> <<"otsprotocol.CreateTimeseriesTableRequest">>;
msg_name_to_fqbin('CreateTimeseriesTableResponse') -> <<"otsprotocol.CreateTimeseriesTableResponse">>;
msg_name_to_fqbin('ListTimeseriesTableRequest') -> <<"otsprotocol.ListTimeseriesTableRequest">>;
msg_name_to_fqbin('ListTimeseriesTableResponse') -> <<"otsprotocol.ListTimeseriesTableResponse">>;
msg_name_to_fqbin('DeleteTimeseriesTableRequest') -> <<"otsprotocol.DeleteTimeseriesTableRequest">>;
msg_name_to_fqbin('DeleteTimeseriesTableResponse') -> <<"otsprotocol.DeleteTimeseriesTableResponse">>;
msg_name_to_fqbin('UpdateTimeseriesTableRequest') -> <<"otsprotocol.UpdateTimeseriesTableRequest">>;
msg_name_to_fqbin('UpdateTimeseriesTableResponse') -> <<"otsprotocol.UpdateTimeseriesTableResponse">>;
msg_name_to_fqbin('DescribeTimeseriesTableRequest') -> <<"otsprotocol.DescribeTimeseriesTableRequest">>;
msg_name_to_fqbin('DescribeTimeseriesTableResponse') -> <<"otsprotocol.DescribeTimeseriesTableResponse">>;
msg_name_to_fqbin('MetaQueryCondition') -> <<"otsprotocol.MetaQueryCondition">>;
msg_name_to_fqbin('MetaQueryCompositeCondition') -> <<"otsprotocol.MetaQueryCompositeCondition">>;
msg_name_to_fqbin('MetaQueryMeasurementCondition') -> <<"otsprotocol.MetaQueryMeasurementCondition">>;
msg_name_to_fqbin('MetaQuerySourceCondition') -> <<"otsprotocol.MetaQuerySourceCondition">>;
msg_name_to_fqbin('MetaQueryTagCondition') -> <<"otsprotocol.MetaQueryTagCondition">>;
msg_name_to_fqbin('MetaQueryAttributeCondition') -> <<"otsprotocol.MetaQueryAttributeCondition">>;
msg_name_to_fqbin('MetaQueryUpdateTimeCondition') -> <<"otsprotocol.MetaQueryUpdateTimeCondition">>;
msg_name_to_fqbin('TimeseriesKey') -> <<"otsprotocol.TimeseriesKey">>;
msg_name_to_fqbin('TimeseriesMeta') -> <<"otsprotocol.TimeseriesMeta">>;
msg_name_to_fqbin('QueryTimeseriesMetaRequest') -> <<"otsprotocol.QueryTimeseriesMetaRequest">>;
msg_name_to_fqbin('QueryTimeseriesMetaResponse') -> <<"otsprotocol.QueryTimeseriesMetaResponse">>;
msg_name_to_fqbin('TimeseriesRows') -> <<"otsprotocol.TimeseriesRows">>;
msg_name_to_fqbin('PutTimeseriesDataRequest') -> <<"otsprotocol.PutTimeseriesDataRequest">>;
msg_name_to_fqbin('FailedRowInfo') -> <<"otsprotocol.FailedRowInfo">>;
msg_name_to_fqbin('MetaUpdateStatus') -> <<"otsprotocol.MetaUpdateStatus">>;
msg_name_to_fqbin('PutTimeseriesDataResponse') -> <<"otsprotocol.PutTimeseriesDataResponse">>;
msg_name_to_fqbin('GetTimeseriesDataRequest') -> <<"otsprotocol.GetTimeseriesDataRequest">>;
msg_name_to_fqbin('GetTimeseriesDataResponse') -> <<"otsprotocol.GetTimeseriesDataResponse">>;
msg_name_to_fqbin('UpdateTimeseriesMetaRequest') -> <<"otsprotocol.UpdateTimeseriesMetaRequest">>;
msg_name_to_fqbin('UpdateTimeseriesMetaResponse') -> <<"otsprotocol.UpdateTimeseriesMetaResponse">>;
msg_name_to_fqbin('DeleteTimeseriesMetaRequest') -> <<"otsprotocol.DeleteTimeseriesMetaRequest">>;
msg_name_to_fqbin('DeleteTimeseriesMetaResponse') -> <<"otsprotocol.DeleteTimeseriesMetaResponse">>;
msg_name_to_fqbin('TimeseriesField') -> <<"otsprotocol.TimeseriesField">>;
msg_name_to_fqbin('TimeseriesRow') -> <<"otsprotocol.TimeseriesRow">>;
msg_name_to_fqbin('TimeseriesPBRows') -> <<"otsprotocol.TimeseriesPBRows">>;
msg_name_to_fqbin('ErrorResponse') -> <<"otsprotocol.ErrorResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"otsprotocol.MetaQueryConditionType">>) -> 'MetaQueryConditionType';
fqbin_to_enum_name(<<"otsprotocol.MetaQueryCompositeOperator">>) -> 'MetaQueryCompositeOperator';
fqbin_to_enum_name(<<"otsprotocol.MetaQuerySingleOperator">>) -> 'MetaQuerySingleOperator';
fqbin_to_enum_name(<<"otsprotocol.RowsSerializeType">>) -> 'RowsSerializeType';
fqbin_to_enum_name(<<"otsprotocol.MetaUpdateMode">>) -> 'MetaUpdateMode';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('MetaQueryConditionType') -> <<"otsprotocol.MetaQueryConditionType">>;
enum_name_to_fqbin('MetaQueryCompositeOperator') -> <<"otsprotocol.MetaQueryCompositeOperator">>;
enum_name_to_fqbin('MetaQuerySingleOperator') -> <<"otsprotocol.MetaQuerySingleOperator">>;
enum_name_to_fqbin('RowsSerializeType') -> <<"otsprotocol.RowsSerializeType">>;
enum_name_to_fqbin('MetaUpdateMode') -> <<"otsprotocol.MetaUpdateMode">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> otsprotocol.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "ots_ts_sql.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ots_ts_sql.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ots_ts_sql"].


get_msg_containment("ots_ts_sql") ->
    ['CreateTimeseriesTableRequest',
     'CreateTimeseriesTableResponse',
     'DeleteTimeseriesMetaRequest',
     'DeleteTimeseriesMetaResponse',
     'DeleteTimeseriesTableRequest',
     'DeleteTimeseriesTableResponse',
     'DescribeTimeseriesTableRequest',
     'DescribeTimeseriesTableResponse',
     'ErrorResponse',
     'FailedRowInfo',
     'GetTimeseriesDataRequest',
     'GetTimeseriesDataResponse',
     'ListTimeseriesTableRequest',
     'ListTimeseriesTableResponse',
     'MetaQueryAttributeCondition',
     'MetaQueryCompositeCondition',
     'MetaQueryCondition',
     'MetaQueryMeasurementCondition',
     'MetaQuerySourceCondition',
     'MetaQueryTagCondition',
     'MetaQueryUpdateTimeCondition',
     'MetaUpdateStatus',
     'PutTimeseriesDataRequest',
     'PutTimeseriesDataResponse',
     'QueryTimeseriesMetaRequest',
     'QueryTimeseriesMetaResponse',
     'TimeseriesField',
     'TimeseriesKey',
     'TimeseriesMeta',
     'TimeseriesPBRows',
     'TimeseriesRow',
     'TimeseriesRows',
     'TimeseriesTableMeta',
     'TimeseriesTableOptions',
     'UpdateTimeseriesMetaRequest',
     'UpdateTimeseriesMetaResponse',
     'UpdateTimeseriesTableRequest',
     'UpdateTimeseriesTableResponse'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("ots_ts_sql") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("ots_ts_sql") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("ots_ts_sql") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("ots_ts_sql") -> ['MetaQueryCompositeOperator', 'MetaQueryConditionType', 'MetaQuerySingleOperator', 'MetaUpdateMode', 'RowsSerializeType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesTableMeta">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesMeta">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesTableOptions">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesRows">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesPBRows">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaUpdateStatus">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.UpdateTimeseriesTableRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.UpdateTimeseriesMetaRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesField">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.QueryTimeseriesMetaRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.PutTimeseriesDataRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.ListTimeseriesTableRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.GetTimeseriesDataRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DescribeTimeseriesTableRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DeleteTimeseriesTableRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DeleteTimeseriesMetaRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.CreateTimeseriesTableRequest">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.UpdateTimeseriesTableResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.UpdateTimeseriesMetaResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.QueryTimeseriesMetaResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.PutTimeseriesDataResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.ListTimeseriesTableResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.GetTimeseriesDataResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.ErrorResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DescribeTimeseriesTableResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DeleteTimeseriesTableResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.DeleteTimeseriesMetaResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.CreateTimeseriesTableResponse">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesRow">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.TimeseriesKey">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryUpdateTimeCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryTagCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQuerySourceCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryMeasurementCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryCompositeCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.MetaQueryAttributeCondition">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(<<"otsprotocol.FailedRowInfo">>) -> "ots_ts_sql";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"otsprotocol.MetaQuerySingleOperator">>) -> "ots_ts_sql";
get_proto_by_enum_name_as_fqbin(<<"otsprotocol.MetaQueryCompositeOperator">>) -> "ots_ts_sql";
get_proto_by_enum_name_as_fqbin(<<"otsprotocol.RowsSerializeType">>) -> "ots_ts_sql";
get_proto_by_enum_name_as_fqbin(<<"otsprotocol.MetaUpdateMode">>) -> "ots_ts_sql";
get_proto_by_enum_name_as_fqbin(<<"otsprotocol.MetaQueryConditionType">>) -> "ots_ts_sql";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.5".

gpb_version_as_list() ->
    [4,19,5].

gpb_version_source() ->
    "git".
