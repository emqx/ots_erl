%%--------------------------------------------------------------------
%% Copyright (c) 2020-2022 EMQ Technologies Co., Ltd. All Rights Reserved.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%--------------------------------------------------------------------
%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.5
%% Version source: git
-module(ots_sql).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_RowsSerializeType/1, enum_value_by_symbol_RowsSerializeType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("ots.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'RowsSerializeType'() :: 'RST_FLAT_BUFFER' | 'RST_PLAIN_BUFFER' | 'RST_PROTO_BUFFER'.
-export_type(['RowsSerializeType'/0]).

%% message types
-type 'TimeseriesKey'() :: #'TimeseriesKey'{}.

-type 'TimeseriesField'() :: #'TimeseriesField'{}.

-type 'TimeseriesRow'() :: #'TimeseriesRow'{}.

-type 'TimeseriesPBRows'() :: #'TimeseriesPBRows'{}.

-type 'TimeseriesRows'() :: #'TimeseriesRows'{}.

-export_type(['TimeseriesKey'/0, 'TimeseriesField'/0, 'TimeseriesRow'/0, 'TimeseriesPBRows'/0, 'TimeseriesRows'/0]).
-type '$msg_name'() :: 'TimeseriesKey' | 'TimeseriesField' | 'TimeseriesRow' | 'TimeseriesPBRows' | 'TimeseriesRows'.
-type '$msg'() :: 'TimeseriesKey'() | 'TimeseriesField'() | 'TimeseriesRow'() | 'TimeseriesPBRows'() | 'TimeseriesRows'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesKey' -> encode_msg_TimeseriesKey(id(Msg, TrUserData), TrUserData);
        'TimeseriesField' -> encode_msg_TimeseriesField(id(Msg, TrUserData), TrUserData);
        'TimeseriesRow' -> encode_msg_TimeseriesRow(id(Msg, TrUserData), TrUserData);
        'TimeseriesPBRows' -> encode_msg_TimeseriesPBRows(id(Msg, TrUserData), TrUserData);
        'TimeseriesRows' -> encode_msg_TimeseriesRows(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_TimeseriesKey(Msg, TrUserData) -> encode_msg_TimeseriesKey(Msg, <<>>, TrUserData).


encode_msg_TimeseriesKey(#'TimeseriesKey'{measurement = F1, data_source = F2, tags = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_TimeseriesField(Msg, TrUserData) -> encode_msg_TimeseriesField(Msg, <<>>, TrUserData).


encode_msg_TimeseriesField(#'TimeseriesField'{field_name = F1, value_int = F2, value_string = F3, value_bool = F4, value_double = F5, value_binary = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_double(TrF5, <<B4/binary, 41>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData) end
    end.

encode_msg_TimeseriesRow(Msg, TrUserData) -> encode_msg_TimeseriesRow(Msg, <<>>, TrUserData).


encode_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = F1, time = F2, fields = F3, meta_cache_update_time = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_mfield_TimeseriesRow_timeseries_key(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_TimeseriesRow_fields(TrF3, B2, TrUserData)
             end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_TimeseriesPBRows(Msg, TrUserData) -> encode_msg_TimeseriesPBRows(Msg, <<>>, TrUserData).


encode_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_TimeseriesPBRows_rows(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_TimeseriesRows(Msg, TrUserData) -> encode_msg_TimeseriesRows(Msg, <<>>, TrUserData).


encode_msg_TimeseriesRows(#'TimeseriesRows'{type = F1, rows_data = F2, flatbuffer_crc32c = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_RowsSerializeType(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

e_mfield_TimeseriesRow_timeseries_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesKey(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TimeseriesRow_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesField(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeseriesRow_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_TimeseriesRow_fields(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeseriesRow_fields(Rest, Bin3, TrUserData);
e_field_TimeseriesRow_fields([], Bin, _TrUserData) -> Bin.

e_mfield_TimeseriesPBRows_rows(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TimeseriesRow(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TimeseriesPBRows_rows([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_TimeseriesPBRows_rows(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TimeseriesPBRows_rows(Rest, Bin3, TrUserData);
e_field_TimeseriesPBRows_rows([], Bin, _TrUserData) -> Bin.

e_enum_RowsSerializeType('RST_FLAT_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_RowsSerializeType('RST_PLAIN_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_RowsSerializeType('RST_PROTO_BUFFER', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_RowsSerializeType(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('TimeseriesKey', Bin, TrUserData) -> id(decode_msg_TimeseriesKey(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesField', Bin, TrUserData) -> id(decode_msg_TimeseriesField(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesRow', Bin, TrUserData) -> id(decode_msg_TimeseriesRow(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesPBRows', Bin, TrUserData) -> id(decode_msg_TimeseriesPBRows(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TimeseriesRows', Bin, TrUserData) -> id(decode_msg_TimeseriesRows(Bin, TrUserData), TrUserData).



decode_msg_TimeseriesKey(Bin, TrUserData) -> dfp_read_field_def_TimeseriesKey(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesKey(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_measurement(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_data_source(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesKey_tags(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesKey(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesKey'{measurement = F@_1, data_source = F@_2, tags = F@_3};
dfp_read_field_def_TimeseriesKey(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesKey(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesKey(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesKey(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesKey(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesKey_measurement(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesKey_data_source(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_TimeseriesKey_tags(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesKey(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesKey(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesKey'{measurement = F@_1, data_source = F@_2, tags = F@_3}.

d_field_TimeseriesKey_measurement(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_measurement(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_measurement(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_TimeseriesKey_data_source(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_data_source(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_data_source(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_TimeseriesKey_tags(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesKey_tags(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesKey_tags(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesKey(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesKey(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesKey(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesKey(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesKey(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesKey(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesKey(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesKey(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesKey(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesKey(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesKey(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesKey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_TimeseriesField(Bin, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesField(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_field_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_int(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_string(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_bool(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<41, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_double(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_TimeseriesField_value_binary(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_TimeseriesField(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'TimeseriesField'{field_name = F@_1, value_int = F@_2, value_string = F@_3, value_bool = F@_4, value_double = F@_5, value_binary = F@_6};
dfp_read_field_def_TimeseriesField(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_TimeseriesField(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_TimeseriesField(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_TimeseriesField(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_TimeseriesField(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesField_field_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_TimeseriesField_value_int(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_TimeseriesField_value_string(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_TimeseriesField_value_bool(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        41 -> d_field_TimeseriesField_value_double(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_TimeseriesField_value_binary(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_TimeseriesField(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesField(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'TimeseriesField'{field_name = F@_1, value_int = F@_2, value_string = F@_3, value_bool = F@_4, value_double = F@_5, value_binary = F@_6}.

d_field_TimeseriesField_field_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_field_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_field_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_int(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_value_int(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_int(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_string(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_TimeseriesField_value_string(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_string(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_bool(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_TimeseriesField_value_bool(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_bool(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_TimeseriesField_value_double(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(infinity, TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id('-infinity', TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(nan, TrUserData), F@_6, TrUserData);
d_field_TimeseriesField_value_double(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, id(Value, TrUserData), F@_6, TrUserData).

d_field_TimeseriesField_value_binary(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_TimeseriesField_value_binary(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_TimeseriesField_value_binary(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesField(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_TimeseriesField(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_TimeseriesField(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_TimeseriesField(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_TimeseriesField(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_TimeseriesField(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesField(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_TimeseriesField(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesField(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_TimeseriesField(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_TimeseriesField(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_TimeseriesField(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_TimeseriesRow(Bin, TrUserData) -> dfp_read_field_def_TimeseriesRow(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesRow(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_timeseries_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_fields(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_TimeseriesRow_meta_cache_update_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_TimeseriesRow(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) -> #'TimeseriesRow'{timeseries_key = F@_1, time = F@_2, fields = lists_reverse(R1, TrUserData), meta_cache_update_time = F@_4};
dfp_read_field_def_TimeseriesRow(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_TimeseriesRow(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_TimeseriesRow(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesRow(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_TimeseriesRow(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesRow_timeseries_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_TimeseriesRow_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_TimeseriesRow_fields(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_TimeseriesRow_meta_cache_update_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_TimeseriesRow(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesRow(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, TrUserData) -> #'TimeseriesRow'{timeseries_key = F@_1, time = F@_2, fields = lists_reverse(R1, TrUserData), meta_cache_update_time = F@_4}.

d_field_TimeseriesRow_timeseries_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_timeseries_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_timeseries_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesKey(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRow(RestF,
                                     0,
                                     0,
                                     F,
                                     if Prev == undefined -> NewFValue;
                                        true -> merge_msg_TimeseriesKey(Prev, NewFValue, TrUserData)
                                     end,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     TrUserData).

d_field_TimeseriesRow_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_TimeseriesRow_fields(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_fields(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_fields(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesField(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_TimeseriesRow_meta_cache_update_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_TimeseriesRow_meta_cache_update_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_TimeseriesRow_meta_cache_update_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TimeseriesRow(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_TimeseriesRow(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_TimeseriesRow(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_TimeseriesRow(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesRow(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_TimeseriesRow(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesRow(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_TimeseriesRow(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesRow(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_TimeseriesRow(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_TimeseriesRow(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_TimeseriesRow(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_TimeseriesPBRows(Bin, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_TimeseriesPBRows(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TimeseriesPBRows_rows(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TimeseriesPBRows(<<>>, 0, 0, _, R1, TrUserData) -> #'TimeseriesPBRows'{rows = lists_reverse(R1, TrUserData)};
dfp_read_field_def_TimeseriesPBRows(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TimeseriesPBRows(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TimeseriesPBRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesPBRows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TimeseriesPBRows(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TimeseriesPBRows_rows(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TimeseriesPBRows(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesPBRows(<<>>, 0, 0, _, R1, TrUserData) -> #'TimeseriesPBRows'{rows = lists_reverse(R1, TrUserData)}.

d_field_TimeseriesPBRows_rows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TimeseriesPBRows_rows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TimeseriesPBRows_rows(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TimeseriesRow(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesPBRows(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_TimeseriesPBRows(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TimeseriesPBRows(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TimeseriesPBRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesPBRows(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TimeseriesPBRows(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesPBRows(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TimeseriesPBRows(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesPBRows(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TimeseriesPBRows(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TimeseriesPBRows(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TimeseriesPBRows(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_TimeseriesRows(Bin, TrUserData) -> dfp_read_field_def_TimeseriesRows(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeseriesRows(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_rows_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_TimeseriesRows(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesRows'{type = F@_1, rows_data = F@_2, flatbuffer_crc32c = F@_3};
dfp_read_field_def_TimeseriesRows(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_TimeseriesRows(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_TimeseriesRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_TimeseriesRows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TimeseriesRows(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_TimeseriesRows_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_TimeseriesRows_rows_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_TimeseriesRows(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_TimeseriesRows(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'TimeseriesRows'{type = F@_1, rows_data = F@_2, flatbuffer_crc32c = F@_3}.

d_field_TimeseriesRows_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RowsSerializeType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_TimeseriesRows_rows_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_rows_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_rows_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_TimeseriesRows_flatbuffer_crc32c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_TimeseriesRows_flatbuffer_crc32c(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_TimeseriesRows_flatbuffer_crc32c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_TimeseriesRows(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_TimeseriesRows(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_TimeseriesRows(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_TimeseriesRows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_TimeseriesRows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TimeseriesRows(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeseriesRows(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_TimeseriesRows(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TimeseriesRows(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_TimeseriesRows(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_TimeseriesRows(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_TimeseriesRows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

d_enum_RowsSerializeType(0) -> 'RST_FLAT_BUFFER';
d_enum_RowsSerializeType(1) -> 'RST_PLAIN_BUFFER';
d_enum_RowsSerializeType(2) -> 'RST_PROTO_BUFFER';
d_enum_RowsSerializeType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesKey' -> merge_msg_TimeseriesKey(Prev, New, TrUserData);
        'TimeseriesField' -> merge_msg_TimeseriesField(Prev, New, TrUserData);
        'TimeseriesRow' -> merge_msg_TimeseriesRow(Prev, New, TrUserData);
        'TimeseriesPBRows' -> merge_msg_TimeseriesPBRows(Prev, New, TrUserData);
        'TimeseriesRows' -> merge_msg_TimeseriesRows(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_TimeseriesKey/3}).
merge_msg_TimeseriesKey(#'TimeseriesKey'{}, #'TimeseriesKey'{measurement = NFmeasurement, data_source = NFdata_source, tags = NFtags}, _) -> #'TimeseriesKey'{measurement = NFmeasurement, data_source = NFdata_source, tags = NFtags}.

-compile({nowarn_unused_function,merge_msg_TimeseriesField/3}).
merge_msg_TimeseriesField(#'TimeseriesField'{field_name = PFfield_name, value_int = PFvalue_int, value_string = PFvalue_string, value_bool = PFvalue_bool, value_double = PFvalue_double, value_binary = PFvalue_binary},
                          #'TimeseriesField'{field_name = NFfield_name, value_int = NFvalue_int, value_string = NFvalue_string, value_bool = NFvalue_bool, value_double = NFvalue_double, value_binary = NFvalue_binary}, _) ->
    #'TimeseriesField'{field_name =
                           if NFfield_name =:= undefined -> PFfield_name;
                              true -> NFfield_name
                           end,
                       value_int =
                           if NFvalue_int =:= undefined -> PFvalue_int;
                              true -> NFvalue_int
                           end,
                       value_string =
                           if NFvalue_string =:= undefined -> PFvalue_string;
                              true -> NFvalue_string
                           end,
                       value_bool =
                           if NFvalue_bool =:= undefined -> PFvalue_bool;
                              true -> NFvalue_bool
                           end,
                       value_double =
                           if NFvalue_double =:= undefined -> PFvalue_double;
                              true -> NFvalue_double
                           end,
                       value_binary =
                           if NFvalue_binary =:= undefined -> PFvalue_binary;
                              true -> NFvalue_binary
                           end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesRow/3}).
merge_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = PFtimeseries_key, time = PFtime, fields = PFfields, meta_cache_update_time = PFmeta_cache_update_time},
                        #'TimeseriesRow'{timeseries_key = NFtimeseries_key, time = NFtime, fields = NFfields, meta_cache_update_time = NFmeta_cache_update_time}, TrUserData) ->
    #'TimeseriesRow'{timeseries_key =
                         if PFtimeseries_key /= undefined, NFtimeseries_key /= undefined -> merge_msg_TimeseriesKey(PFtimeseries_key, NFtimeseries_key, TrUserData);
                            PFtimeseries_key == undefined -> NFtimeseries_key;
                            NFtimeseries_key == undefined -> PFtimeseries_key
                         end,
                     time =
                         if NFtime =:= undefined -> PFtime;
                            true -> NFtime
                         end,
                     fields =
                         if PFfields /= undefined, NFfields /= undefined -> 'erlang_++'(PFfields, NFfields, TrUserData);
                            PFfields == undefined -> NFfields;
                            NFfields == undefined -> PFfields
                         end,
                     meta_cache_update_time =
                         if NFmeta_cache_update_time =:= undefined -> PFmeta_cache_update_time;
                            true -> NFmeta_cache_update_time
                         end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesPBRows/3}).
merge_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = PFrows}, #'TimeseriesPBRows'{rows = NFrows}, TrUserData) ->
    #'TimeseriesPBRows'{rows =
                            if PFrows /= undefined, NFrows /= undefined -> 'erlang_++'(PFrows, NFrows, TrUserData);
                               PFrows == undefined -> NFrows;
                               NFrows == undefined -> PFrows
                            end}.

-compile({nowarn_unused_function,merge_msg_TimeseriesRows/3}).
merge_msg_TimeseriesRows(#'TimeseriesRows'{flatbuffer_crc32c = PFflatbuffer_crc32c}, #'TimeseriesRows'{type = NFtype, rows_data = NFrows_data, flatbuffer_crc32c = NFflatbuffer_crc32c}, _) ->
    #'TimeseriesRows'{type = NFtype, rows_data = NFrows_data,
                      flatbuffer_crc32c =
                          if NFflatbuffer_crc32c =:= undefined -> PFflatbuffer_crc32c;
                             true -> NFflatbuffer_crc32c
                          end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'TimeseriesKey' -> v_msg_TimeseriesKey(Msg, [MsgName], TrUserData);
        'TimeseriesField' -> v_msg_TimeseriesField(Msg, [MsgName], TrUserData);
        'TimeseriesRow' -> v_msg_TimeseriesRow(Msg, [MsgName], TrUserData);
        'TimeseriesPBRows' -> v_msg_TimeseriesPBRows(Msg, [MsgName], TrUserData);
        'TimeseriesRows' -> v_msg_TimeseriesRows(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_TimeseriesKey/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesKey/3}).
v_msg_TimeseriesKey(#'TimeseriesKey'{measurement = F1, data_source = F2, tags = F3}, Path, TrUserData) ->
    v_type_string(F1, [measurement | Path], TrUserData),
    v_type_string(F2, [data_source | Path], TrUserData),
    v_type_string(F3, [tags | Path], TrUserData),
    ok;
v_msg_TimeseriesKey(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesKey'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesField/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesField/3}).
v_msg_TimeseriesField(#'TimeseriesField'{field_name = F1, value_int = F2, value_string = F3, value_bool = F4, value_double = F5, value_binary = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [field_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [value_int | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [value_string | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [value_bool | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_double(F5, [value_double | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [value_binary | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesField(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesField'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesRow/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesRow/3}).
v_msg_TimeseriesRow(#'TimeseriesRow'{timeseries_key = F1, time = F2, fields = F3, meta_cache_update_time = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_TimeseriesKey(F1, [timeseries_key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_TimeseriesField(Elem, [fields | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesField'}}, F3, [fields | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [meta_cache_update_time | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesRow(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesRow'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesPBRows/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesPBRows/3}).
v_msg_TimeseriesPBRows(#'TimeseriesPBRows'{rows = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_TimeseriesRow(Elem, [rows | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'TimeseriesRow'}}, F1, [rows | Path])
    end,
    ok;
v_msg_TimeseriesPBRows(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesPBRows'}, X, Path).

-compile({nowarn_unused_function,v_msg_TimeseriesRows/3}).
-dialyzer({nowarn_function,v_msg_TimeseriesRows/3}).
v_msg_TimeseriesRows(#'TimeseriesRows'{type = F1, rows_data = F2, flatbuffer_crc32c = F3}, Path, TrUserData) ->
    v_enum_RowsSerializeType(F1, [type | Path], TrUserData),
    v_type_bytes(F2, [rows_data | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [flatbuffer_crc32c | Path], TrUserData)
    end,
    ok;
v_msg_TimeseriesRows(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TimeseriesRows'}, X, Path).

-compile({nowarn_unused_function,v_enum_RowsSerializeType/3}).
-dialyzer({nowarn_function,v_enum_RowsSerializeType/3}).
v_enum_RowsSerializeType('RST_FLAT_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType('RST_PLAIN_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType('RST_PROTO_BUFFER', _Path, _TrUserData) -> ok;
v_enum_RowsSerializeType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_RowsSerializeType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RowsSerializeType'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'RowsSerializeType'}, [{'RST_FLAT_BUFFER', 0}, {'RST_PLAIN_BUFFER', 1}, {'RST_PROTO_BUFFER', 2}]},
     {{msg, 'TimeseriesKey'},
      [#field{name = measurement, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = data_source, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
       #field{name = tags, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}]},
     {{msg, 'TimeseriesField'},
      [#field{name = field_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = value_int, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = value_string, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = value_bool, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
       #field{name = value_double, fnum = 5, rnum = 6, type = double, occurrence = optional, opts = []},
       #field{name = value_binary, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesRow'},
      [#field{name = timeseries_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = fields, fnum = 3, rnum = 4, type = {msg, 'TimeseriesField'}, occurrence = repeated, opts = []},
       #field{name = meta_cache_update_time, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'TimeseriesPBRows'}, [#field{name = rows, fnum = 1, rnum = 2, type = {msg, 'TimeseriesRow'}, occurrence = repeated, opts = []}]},
     {{msg, 'TimeseriesRows'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RowsSerializeType'}, occurrence = required, opts = []},
       #field{name = rows_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []},
       #field{name = flatbuffer_crc32c, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}]}].


get_msg_names() -> ['TimeseriesKey', 'TimeseriesField', 'TimeseriesRow', 'TimeseriesPBRows', 'TimeseriesRows'].


get_group_names() -> [].


get_msg_or_group_names() -> ['TimeseriesKey', 'TimeseriesField', 'TimeseriesRow', 'TimeseriesPBRows', 'TimeseriesRows'].


get_enum_names() -> ['RowsSerializeType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('TimeseriesKey') ->
    [#field{name = measurement, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = data_source, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []},
     #field{name = tags, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}];
find_msg_def('TimeseriesField') ->
    [#field{name = field_name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = value_int, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = value_string, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = value_bool, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
     #field{name = value_double, fnum = 5, rnum = 6, type = double, occurrence = optional, opts = []},
     #field{name = value_binary, fnum = 6, rnum = 7, type = bytes, occurrence = optional, opts = []}];
find_msg_def('TimeseriesRow') ->
    [#field{name = timeseries_key, fnum = 1, rnum = 2, type = {msg, 'TimeseriesKey'}, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = fields, fnum = 3, rnum = 4, type = {msg, 'TimeseriesField'}, occurrence = repeated, opts = []},
     #field{name = meta_cache_update_time, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('TimeseriesPBRows') -> [#field{name = rows, fnum = 1, rnum = 2, type = {msg, 'TimeseriesRow'}, occurrence = repeated, opts = []}];
find_msg_def('TimeseriesRows') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RowsSerializeType'}, occurrence = required, opts = []},
     #field{name = rows_data, fnum = 2, rnum = 3, type = bytes, occurrence = required, opts = []},
     #field{name = flatbuffer_crc32c, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('RowsSerializeType') -> [{'RST_FLAT_BUFFER', 0}, {'RST_PLAIN_BUFFER', 1}, {'RST_PROTO_BUFFER', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('RowsSerializeType', Value) -> enum_symbol_by_value_RowsSerializeType(Value).


enum_value_by_symbol('RowsSerializeType', Sym) -> enum_value_by_symbol_RowsSerializeType(Sym).


enum_symbol_by_value_RowsSerializeType(0) -> 'RST_FLAT_BUFFER';
enum_symbol_by_value_RowsSerializeType(1) -> 'RST_PLAIN_BUFFER';
enum_symbol_by_value_RowsSerializeType(2) -> 'RST_PROTO_BUFFER'.


enum_value_by_symbol_RowsSerializeType('RST_FLAT_BUFFER') -> 0;
enum_value_by_symbol_RowsSerializeType('RST_PLAIN_BUFFER') -> 1;
enum_value_by_symbol_RowsSerializeType('RST_PROTO_BUFFER') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"TimeseriesKey">>) -> 'TimeseriesKey';
fqbin_to_msg_name(<<"TimeseriesField">>) -> 'TimeseriesField';
fqbin_to_msg_name(<<"TimeseriesRow">>) -> 'TimeseriesRow';
fqbin_to_msg_name(<<"TimeseriesPBRows">>) -> 'TimeseriesPBRows';
fqbin_to_msg_name(<<"TimeseriesRows">>) -> 'TimeseriesRows';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('TimeseriesKey') -> <<"TimeseriesKey">>;
msg_name_to_fqbin('TimeseriesField') -> <<"TimeseriesField">>;
msg_name_to_fqbin('TimeseriesRow') -> <<"TimeseriesRow">>;
msg_name_to_fqbin('TimeseriesPBRows') -> <<"TimeseriesPBRows">>;
msg_name_to_fqbin('TimeseriesRows') -> <<"TimeseriesRows">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"RowsSerializeType">>) -> 'RowsSerializeType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('RowsSerializeType') -> <<"RowsSerializeType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "ots.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ots.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ots"].


get_msg_containment("ots") -> ['TimeseriesField', 'TimeseriesKey', 'TimeseriesPBRows', 'TimeseriesRow', 'TimeseriesRows'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("ots") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("ots") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("ots") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("ots") -> ['RowsSerializeType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"TimeseriesRows">>) -> "ots";
get_proto_by_msg_name_as_fqbin(<<"TimeseriesPBRows">>) -> "ots";
get_proto_by_msg_name_as_fqbin(<<"TimeseriesField">>) -> "ots";
get_proto_by_msg_name_as_fqbin(<<"TimeseriesRow">>) -> "ots";
get_proto_by_msg_name_as_fqbin(<<"TimeseriesKey">>) -> "ots";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"RowsSerializeType">>) -> "ots";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.5".

gpb_version_as_list() ->
    [4,19,5].

gpb_version_source() ->
    "git".
