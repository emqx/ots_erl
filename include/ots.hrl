%%--------------------------------------------------------------------
%% Copyright (c) 2020-2022 EMQ Technologies Co., Ltd. All Rights Reserved.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%--------------------------------------------------------------------

-define(OTS_CLIENT_TS, time_series).
-define(OTS_CLIENT_WC, wide_column).

-type ots_client_type() :: ?OTS_CLIENT_TS | ?OTS_CLIENT_WC.

-record(ots_client, {
    pool                :: term(),
    type = time_series  :: ots_client_type(),
    endpoint            :: binary(),
    instance            :: binary(),
    access_key          :: binary(),
    access_secret       :: binary()
}).

%% table end point
-define(CREATE_TABLE                , "/CreateTable").
-define(LIST_TABLE                  , "/ListTable").
-define(DELETE_TABLE                , "/DeleteTable").
-define(UPDATE_TABLE                , "/UpdateTable").
-define(DESCRIBE_TABLE              , "/DescribeTable").
-define(COMPUTE_SPLIT_POINTS_BY_SIZE, "/ComputeSplitPointsBySize").

%% single row
-define(GET_ROW                     , "/GetRow").
-define(PUT_ROW                     , "/PutRow").
-define(UPDATE_ROW                  , "/UpdateRow").
-define(DELETE_ROW                  , "/DeleteRow").

%% batch row
-define(GET_RANGE                   , "/GetRange").
-define(BATCH_GET_ROW               , "/BatchGetRow").
-define(BATCH_WRITE_ROW             , "/BatchWriteRow").

%% stream
-define(LIST_STREAM                 , "/ListStream").
-define(DESCRIBE_STREAM             , "/DescribeStream").
-define(GET_SHARD_ITERATOR          , "/GetShardIterator").
-define(GET_STREAM_RECORD           , "/GetStreamRecord").

%% index
-define(CREATE_INDEX                , "/CreateIndex").
-define(DELETE_INDEX                , "/DeleteIndex").

%% time series
-define(CREATE_TIMESERIES_TABLE     , "/CreateTimeseriesTable").
-define(LIST_TIMESERIES_TABLE       , "/ListTimeseriesTable").
-define(UPDATE_TIMESERIES_TABLE     , "/UpdateTimeseriesTable").
-define(DESCRIBE_TIMESERIES_TABLE   , "/DescribeTimeseriesTable").
-define(DELETE_TIMESERIES_TABLE     , "/DeleteTimeseriesTable").
-define(PUT_TIMESERIES_DATA         , "/PutTimeseriesData").
-define(GET_TIMESERIES_DATA         , "/GetTimeseriesData").
-define(QUERY_TIMESERIES_META       , "/QueryTimeseriesMeta").
-define(UPDATE_TIMESERIES_META      , "/UpdateTimeseriesMeta").
-define(DELETE_TIMESERIES_META      , "/DeleteTimeseriesMeta").

%% -------------------------------------------------------------------------------------------------
%% proto buffer part
%% 
%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.5
%% Version source: git
%% 
-ifndef(ots).
-define(ots, true).

-define(ots_gpb_version, "4.19.5").

-ifndef('TIMESERIESKEY_PB_H').
-define('TIMESERIESKEY_PB_H', true).
-record('TimeseriesKey',
        {measurement            :: unicode:chardata() | undefined, % = 1, required
         data_source            :: unicode:chardata() | undefined, % = 2, required
         tags                   :: unicode:chardata() | undefined % = 3, required
        }).
-endif.

-ifndef('TIMESERIESFIELD_PB_H').
-define('TIMESERIESFIELD_PB_H', true).
-record('TimeseriesField',
        {field_name             :: unicode:chardata() | undefined, % = 1, optional
         value_int              :: integer() | undefined, % = 2, optional, 64 bits
         value_string           :: unicode:chardata() | undefined, % = 3, optional
         value_bool             :: boolean() | 0 | 1 | undefined, % = 4, optional
         value_double           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 5, optional
         value_binary           :: iodata() | undefined % = 6, optional
        }).
-endif.

-ifndef('TIMESERIESROW_PB_H').
-define('TIMESERIESROW_PB_H', true).
-record('TimeseriesRow',
        {timeseries_key         :: ots:'TimeseriesKey'() | undefined, % = 1, optional
         time                   :: integer() | undefined, % = 2, optional, 64 bits
         fields = []            :: [ots:'TimeseriesField'()] | undefined, % = 3, repeated
         meta_cache_update_time :: non_neg_integer() | undefined % = 4, optional, 32 bits
        }).
-endif.

-ifndef('TIMESERIESPBROWS_PB_H').
-define('TIMESERIESPBROWS_PB_H', true).
-record('TimeseriesPBRows',
        {rows = []              :: [ots:'TimeseriesRow'()] | undefined % = 1, repeated
        }).
-endif.

-ifndef('TIMESERIESROWS_PB_H').
-define('TIMESERIESROWS_PB_H', true).
-record('TimeseriesRows',
        {type                   :: 'RST_FLAT_BUFFER' | 'RST_PLAIN_BUFFER' | 'RST_PROTO_BUFFER' | integer() | undefined, % = 1, required, enum RowsSerializeType
         rows_data              :: iodata() | undefined, % = 2, required
         flatbuffer_crc32c      :: integer() | undefined % = 3, optional, 32 bits
        }).
-endif.

-endif.
